https://images-na.ssl-images-amazon.com/images/G/01/AmazonExports/Fuji/2020/May/Dashboard/Fuji_Dash_Electronics_2x._SY608_CB432774322_.jpg
//img[contains(@src,'Dash_Electronics')]
//img[starts-with(@alt,'Electronics')]
//*[text()='& Orders']
//*[contains(text(),'Orders')]
//input[@name='username']|//input[@id='login-username']
C:\Users\amuthaiya\AppData\Local\Programs\Python\Python39;C:\Users\amuthaiya\AppData\Local\Programs\Python\Python39\Scripts
C:\Program Files\JetBrains\PyCharm Community Edition 2020.3.3
M7847944
/html[1]/body[1]/section[1]/div[1]/div[1]/div[19]/a[1]/div[1]/h3[1]
//div[@class='search_header']
WebElement Next=driver.findElement(By.xpath("//button[class='clik_btn_log btn-block']"));
//i[@class='icon-Home-page-search']
/html[1]/body[1]/nav[1]/div[1]/ul[1]/li[8]/a[1]
dropdown-toggle hidden-xs hidden-sm ga_browse_top_cat
//a[@class='dropdown-toggle ga_top_category'][normalize-space()='Software Testing']


C:\Program Files (x86)\Common Files\Oracle\Java\javapath;
C:\WINDOWS\system32;
C:\WINDOWS;
C:\WINDOWS\System32\Wbem;
C:\WINDOWS\System32\WindowsPowerShell\v1.0\;
C:\WINDOWS\System32\OpenSSH\;
C:\Program Files (x86)\Symantec\VIP Access Client\;
C:\Program Files\Java\jdk1.8.0_261\bin;
C:\Program Files\Git\cmd;
C:\Program Files (x86)\Pulse Secure\VC142.CRT\X64\;
C:\Program Files (x86)\Pulse Secure\VC142.CRT\X86\;
C:\Program Files\nodejs\;
C:\Program Files\Docker\Docker\resources\bin;
C:\ProgramData\DockerDesktop\version-bin;
C:\Users\amuthaiya\AppData\Local\Programs\Python\Python39;
C:\Users\amuthaiya\AppData\Local\Programs\Python\Python39\Scripts;
C:\Program Files\MySQL\MySQL Server 8.0\bin;
C:\Program Files\Java\apache-maven-3.6.3-bin\apache-maven-3.6.3\bin;

------------------------------------------------------------------------------------------
git- distributed version control system
SCM - Software Configuration Mnagement ,Source Code Management
README.md (mark down)

------------------------------
C:\Program Files\Java\jdk1.8.0_261\bin

C:\Program Files\Java\jre1.8.0_271\bin

https://github.com/Aarthi1803/eclipse-demo-project.git
----------------------------------------------------------

BACKBONE.JS :
==============
backbone.js is lightweight framework that lets us create single page applications in a structured manner.It is based on
Model-View-Controller(MV*)pattern.It is best suited for creating single page applications using a RESTful services for persisting data.
Backbone.js has hard dependency on underscore.js and soft dependency on jQuery.

Backbone JS Modules
=======================
Its made up of the following modules:
Views,Events,Models,Collections,Routers

<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <script>
            $(document).ready(function(){
                //here we have to start to write our backbone js structure code
                var FirstView = Backbone.View.extend({
                    render:function(){
                        console.log("Hello OWT I love coding in Java");

                    }
                });
                var firstview = new FirstView();
                firstview.render();

            });
        </script>
        
    </body>
</html>
====================
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <script>
            $(document).ready(function(){
                //here we have to start to write our backbone js structure code
                var FirstView = Backbone.View.extend({
                    initialize:function(){
                        this.render();
                    },
                    render:function(){
                        console.log("Hello OWT I love coding in Java");

                    }
                });
                var firstview = new FirstView();
                //firstview.render();

            });
        </script>
        
    </body>
</html>
====================
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script>
            $(document).ready(function(){
                //here we have to start to write our backbone js structure code
                var FirstView = Backbone.View.extend({
                    initialize:function(){
                        this.render();
                    },
                    render:function(){
                        console.log("Hello OWT I love coding in Java");
                        this.$el.html("here is the custom message");
                        console.log(this.$el); //this.$el jquery object which basically refers to the dom element
                        console.log(this.el);//this is jquery selector --> DOM element <div></div>



                    }
                });
                var firstview = new FirstView(
                    {
                        el:"#content"
                    }
                );
                //firstview.render();

            });
        </script>
        
    </body>
</html>
=============
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script>
            $(document).ready(function(){
                //here we have to start to write our backbone js structure code
                var FirstView = Backbone.View.extend({
                    tagName:"span",
                    className:"owt",id:"1234",
                    initialize:function(){
                        this.render();
                    },
                    render:function(){
                        console.log("Hello OWT I love coding in Java");
                        this.$el.html("here is the custom message");
                        console.log(this.$el); //this.$el jquery object which basically refers to the dom element(el)
                        console.log(this.el);//this is jquery selector --> DOM element <div></div>


                    }
                });
                var firstview = new FirstView();  
                
                //firstview.render();

            });
        </script>
        
    </body>
</html>
=================
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script>
            $(document).ready(function(){
                var FirstView = Backbone.View.extend({
                    initialize:function(){
                        console.log(this.el);//DOM element <div></div>
                        console.log(this.$el);//jquery object which points to el
                        console.log("OWT First View");

                    }

                });

                var fview = new FirstView();


            });
        </script>
    </body>
</html>
===================
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script>
            $(document).ready(function(){
                var FirstView = Backbone.View.extend({
                    tagName:"p",
                    initialize:function(){
                        console.log(this.el);//DOM element <div></div>
                        console.log(this.$el);//jquery object which points to el
                        console.log("OWT First View");

                    }

                });

                var fview = new FirstView();


            });
        </script>
    </body>
</html>
====================
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script>
            $(document).ready(function(){
                var FirstView = Backbone.View.extend({
                    tagName:"p",
                    initialize:function(){
                        console.log(this.el);//DOM element <div></div>
                        console.log(this.$el);//jquery object which points to el
                        this.$el.html("Hello OWT"); //this is equivalent to $("#content").html("Hello OWT")
                        //$("#content").html("Hello OWT"); 
                        console.log("OWT First View");

                    }

                });

                var fview = new FirstView(
                    {
                        el:"#content"
                    }
                );


            });
        </script>
    </body>
</html>
=================
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script>
            $(document).ready(function(){
                var FirstView = Backbone.View.extend({
                    tagName:"p",
                    initialize:function(){
                        console.log(this.el);//DOM element <div></div>
                        console.log(this.$el);//jquery object which points to el
                        //this.$el.html("Hello OWT"); //this is equivalent to $("#content").html("Hello OWT")
                        //$("#content").html("Hello OWT"); 
                        $(this.el).html("Hello OWT");
                        console.log("OWT First View");

                    }

                });

                var fview = new FirstView(
                    {
                        el:"#content"
                    }
                );


            });
        </script>
    </body>
</html>
================
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script>
            $(document).ready(function(){
                var FirstView = Backbone.View.extend({
                    tagName:"p",
                    initialize:function(){
                        this.$el.html("Hello OWT");
                        return this;
                        //console.log(this.el);//DOM element <div></div>
                        //console.log(this.$el);//jquery object which points to el
                        //this.$el.html("Hello OWT"); //this is equivalent to $("#content").html("Hello OWT")
                        //$("#content").html("Hello OWT"); 
                        //$(this.el).html("Hello OWT");
                        console.log("OWT First View");

                    }

                });

                var fview = new FirstView();
                $("#content").html(fview.$el);
                   

            });
        </script>
    </body>
</html>
=============
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script>
            $(document).ready(function(){
                var FirstView = Backbone.View.extend({
                    tagName:"p",
                    initialize:function(){
                        this.$el.html("Hello OWT");
                        return this;
                        console.log(this.el);//DOM element <div></div>
                        console.log(this.$el);//jquery object which points to el
                        //this.$el.html("Hello OWT"); //this is equivalent to $("#content").html("Hello OWT")
                        //$("#content").html("Hello OWT"); 
                        //$(this.el).html("Hello OWT");
                        console.log("OWT First View");

                    }

                });

                var fview = new FirstView();
                $("#content").html(fview.$el);
                   

            });
        </script>
    </body>
</html>
===============
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script>
            $(document).ready(function(){
                var FirstView = Backbone.View.extend({
                    tagName:"p",
                    initialize:function(){
                        this.$el.html("Hello OWT");
                        return this;
                        console.log(this.el);//DOM element <div></div>
                        console.log(this.$el);//jquery object which points to el
                        //this.$el.html("Hello OWT"); //this is equivalent to $("#content").html("Hello OWT")
                        //$("#content").html("Hello OWT"); 
                        //$(this.el).html("Hello OWT");
                        console.log("OWT First View");

                    }

                });

                var fview = new FirstView(
                    {
                        el:"#content"
                    }
                );
                $("#content").html(fview.$el);
                   

            });
        </script>
    </body>
</html>
===============
Templates in Backbone.js:

<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script>
            $(document).ready(function(){
                var FirstView = Backbone.View.extend({
                    el:"#content",
                    template:_.template("Heloo this is first way to create template"),
                  
                    initialize:function(){
                        this.render();
                        

                    },
                    render:function(){
                        this.$el.html(this.template());
                        return this;
                    }

                });

                var fview = new FirstView();
                   
                

            });
        </script>
    </body>
</html>

============
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script type="text/template" id="tmpl-fview">
              Hello this is first way to create template
        </script>
        <script>
            $(document).ready(function(){
                var FirstView = Backbone.View.extend({
                    el:"#content",
                    template:_.template($("#tmpl-fview").html() ),
                  
                    initialize:function(){
                        this.render();
                        

                    },
                    render:function(){
                        this.$el.html(this.template());
                        return this;
                    }

                });

                var fview = new FirstView();
                   
                

            });
        </script>
    </body>
</html>
==============
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script type="text/template" id="tmpl-fview">
              Hello this is first way to create template
        </script>
        <script>
            $(document).ready(function(){
                var FirstView = Backbone.View.extend({
                    el:"#content",
                    //template:_.template($("#tmpl-fview").html() ),
                  
                    initialize:function(){
                        this.render();
                        

                    },
                    render:function(){
                        var template=_.template($("#tmpl-fview").html());
                        this.$el.html(template());
                        return this;
                    }

                });

                var fview = new FirstView();
                   
                

            });
        </script>
    </body>
</html>
================
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script type="text/template" id="tmpl-fview">
              Hello this is first way to create template
        </script>
        <script>
            $(document).ready(function(){
                var FirstView = Backbone.View.extend({
                    el:"#content",
                    template:$("#tmpl-fview").html() ,
                  
                    initialize:function(){
                        this.render();
                        

                    },
                    render:function(){
                        var template=_.template(this.template);
                        this.$el.html(template());
                        return this;
                    }

                });

                var fview = new FirstView();
                   
                

            });
        </script>
    </body>
</html>
=================
Head back to Underscore.js Template again:

<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            $(document).ready(function(){

                var FirstView = Backbone.View.extend({
                    el:"#content",
                    template:_.template("Hello this is inline template"),//inline template
                    initialize:function(){
                        this.render();
                    },
                    render:function(){
                        this.$el.html(this.template());
                        console.log("This is our revision class of backbone template ");

                    }
                });
                var fview = new FirstView();

            });
        
        </script>
    </body>
</html>
=====================
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script type="text/html" id="our-template">
            This is use of external template in backbone.js
        </script>
        
        <script>
            $(document).ready(function(){

                var FirstView = Backbone.View.extend({
                    el:"#content",
                    template:_.template($("#our-template").html()),//inline template
                    initialize:function(){
                        this.render();
                    },
                    render:function(){
                        this.$el.html(this.template());
                        console.log("This is our revision class of backbone template ");

                    }
                });
                var fview = new FirstView();

            });
        
        </script>
    </body>
</html>
=================
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script type="text/html" id="our-template">
            This is use of external template in backbone.js
        </script>
        
        <script>
            $(document).ready(function(){

                var FirstView = Backbone.View.extend({
                    el:"#content",
                    template:$("#our-template").html(),//external template
                    initialize:function(){
                        this.render();
                    },
                    render:function(){
                        template = _.template(this.template);
                        this.$el.html(this.template);
                        console.log("This is our revision class of backbone template ");

                    }
                });
                var fview = new FirstView();

            });
        
        </script>
    </body>
</html>
==============
Delegate Events in backbone.js :
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content">

        </div>
        <script type="text/html" id="eventTemplate">
            <button id="btnClick">Click Me</button>
        
        </script>
        
        <script>
            $(document).ready(function(){
                var EventsView = Backbone.View.extend({
                    el:"#content",
                    template:_.template($("#eventTemplate").html()),
                    events:{
                        "click #btnClick": "OnClick" //<event_name> <selector> :<callback_function>

                    },
                    OnClick:function(){
                        alert("Hey,I am here");

                    },
                    initialize:function(){
                        this.render();

                    },
                    render:function(){
                        this.$el.html(this.template());
                        console.log("This video is about Delegate Events")
                    }
                });
                var eventView = new EventsView();

               
            });
        
        </script>
    </body>
</html>
==========
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content">

        </div>
        <script type="text/html" id="eventTemplate">
            <button id="btnClick">Click Me</button>
        
        </script>
        
        <script>
            $(document).ready(function(){
                var EventsView = Backbone.View.extend({
                    el:"#content",
                    template:_.template("Hey I am here <button>Click to see Alert </button>"),
                    events:{
                        "click button": "OnClick" //<event_name> <selector> :<callback_function>

                    },
                    OnClick:function(){
                        alert("Hey,I am here");

                    },
                    initialize:function(){
                        this.render();

                    },
                    render:function(){
                        this.$el.html(this.template());
                        console.log("This video is about Delegate Events")
                    }
                });
                var eventView = new EventsView();

               
            });
        
        </script>
    </body>
</html>
===============
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content">

        </div>
        <script type="text/html" id="eventTemplate">
            <button id="btnClick">Click Me</button>
        
        </script>
        
        <script>
            $(document).ready(function(){
                var EventsView = Backbone.View.extend({
                    el:"#content",
                    template:_.template("Hey I am here <button>Click to see Alert </button>"),
                    events:{
                        "click button": "OnClick" //<event_name> <selector> :<callback_function>

                    },
                    OnClick:function(){
                        var a=10;
                        var b=20;
                        console.log("Sum of "+a+" and "+b+" is equal to "+(a+b));

                    },
                    initialize:function(){
                        this.render();

                    },
                    render:function(){
                        this.$el.html(this.template());
                        console.log("This video is about Delegate Events")
                    }
                });
                var eventView = new EventsView();

               
            });
        
        </script>
    </body>
</html>
============
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content">

        </div>
        <script type="text/html" id="eventTemplate">
            <button id="btnClick">Click Me</button>
        
        </script>
        
        <script>
            $(document).ready(function(){
                var EventsView = Backbone.View.extend({
                    el:"#content",
                    template:_.template("Hey I am here <button>Sum all values </button> <button id='simple'>Click here</button>"),
                    events:{
                        "click button#simple": "OnClick" //<event_name> <selector> :<callback_function>

                    },
                    OnClick:function(){
                        alert("Alert function running");
                    },
                    initialize:function(){
                        this.render();

                    },
                    render:function(){
                        this.$el.html(this.template());
                        console.log("This video is about Delegate Events")
                    }
                });
                var eventView = new EventsView();

               
            });
        
        </script>
    </body>
</html>
===============
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content">

        </div>
        <script type="text/html" id="eventTemplate">
            <button id="btnClick">Click Me</button>
        
        </script>
        
        <script>
            $(document).ready(function(){
                var EventsView = Backbone.View.extend({
                    el:"#content",
                    template:_.template("Hey I am here <button>Sum all values </button> <button id='simple'>Click here</button>"),
                    events:{
                        "mouseover button#simple": "OnClick" //<event_name> <selector> :<callback_function>

                    },
                    OnClick:function(){
                        alert("Alert function running");
                    },
                    initialize:function(){
                        this.render();

                    },
                    render:function(){
                        this.$el.html(this.template());
                        console.log("This video is about Delegate Events")
                    }
                });
                var eventView = new EventsView();

               
            });
        
        </script>
    </body>
</html>
===================
Introduction of models:
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <script>
            var FirstModel = Backbone.Model.extend({
                initialize:function(){
                    console.log("This is our first model");
                }
            });
            var fmodel = new FirstModel();
            
        </script>
    </body>
</html>
===========
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <script>
            var FirstModel = Backbone.Model.extend({
                initialize:function(){
                    console.log("This is our first model");
                }
            });
            var fmodel = new FirstModel();
            //fmodel.set("name","Online web tutor");
            fmodel.set({
                name:"Online Web tutor",
                author:"Profotech Solutions",
                anchor:"Sanjay Kumar"
            });
        </script>
    </body>
</html>

O/P IN CHROME :
This is our first model
fmodel
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: {name: "Online Web tutor", author: "Profotech Solutions", anchor: "Sanjay Kumar"}changed: {}cid: "c0"_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Online Web tutor", author: "Profotech Solutions", anchor: "Sanjay Kumar"}_silent: {}__proto__: g.Model
fmodel.toJSON()
{name: "Online Web tutor", author: "Profotech Solutions", anchor: "Sanjay Kumar"}anchor: "Sanjay Kumar"author: "Profotech Solutions"name: "Online Web tutor"__proto__: Object
fmodel.get("author")
"Profotech Solutions"
===========
Pass Model data to backbone.js Views:
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <script>
            var Model = Backbone.Model.extend({
                initialize:function(){
                    console.log("Model created");
                }

            });
            var fmodel = new Model();
            fmodel.set({
                name:"Sanjay Kumar",
                youtube:"Online Web Tutor",
                team:"Profotech solutions Team"
            });
            var ModelView = Backbone.View.extend({
                initialize:function(){
                    
                    this.render();

                },
                render:function(){
                    console.log("Model View Created");

                }
            });
            var mview = new ModelView();
        </script>
    </body>
</html>

O/P IN CHROME:
Model created
message.html:28 Model View Created
fmodel 
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: name: "Sanjay Kumar"team: "Profotech solutions Team"youtube: "Online Web Tutor"__proto__: Objectchanged: {}cid: "c0"_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Sanjay Kumar", youtube: "Online Web Tutor", team: "Profotech solutions Team"}_silent: {}__proto__: g.Model
------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <script>
            var Model = Backbone.Model.extend({
                initialize:function(){
                    console.log("Model created");
                }

            });
            var fmodel = new Model({
            
                name:"Sanjay Kumar",
                youtube:"Online Web Tutor",
                team:"Profotech solutions Team"
            });
            var ModelView = Backbone.View.extend({
                initialize:function(){
                    
                    this.render();

                },
                render:function(){
                    console.log("Model View Created");

                }
            });
            var mview = new ModelView();
        </script>
    </body>
</html>

O/P IN CHROME:
Model created
message.html:28 Model View Created
fmodel 
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: name: "Sanjay Kumar"team: "Profotech solutions Team"youtube: "Online Web Tutor"__proto__: Objectchanged: {}cid: "c0"_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Sanjay Kumar", youtube: "Online Web Tutor", team: "Profotech solutions Team"}_silent: {}__proto__: g.Model
fmodel.toJSON() 
{name: "Sanjay Kumar", youtube: "Online Web Tutor", team: "Profotech solutions Team"}name: "Sanjay Kumar"team: "Profotech solutions Team"youtube: "Online Web Tutor"__proto__: Object
fmodel.get("name") 
"Sanjay Kumar"
------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <script>
            var Model = Backbone.Model.extend({
                initialize:function(){
                    console.log("Model created");
                }

            });
            var fmodel = new Model({
            
                name:"Sanjay Kumar",
                youtube:"Online Web Tutor",
                team:"Profotech solutions Team"
            });
            var ModelView = Backbone.View.extend({
                initialize:function(){
                    
                    this.render();

                },
                render:function(){
                    console.log("Model View Created");
                    console.log(this.model.toJSON());

                }
            });
            var mview = new ModelView({
                model:fmodel
            });
        </script>
    </body>
</html>
O/P IN CHROME:
Model created
message.html:28 Model View Created
message.html:29 {name: "Sanjay Kumar", youtube: "Online Web Tutor", team: "Profotech solutions Team"}
--------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <script>
            var Model = Backbone.Model.extend({
                initialize:function(){
                    console.log("Model created");
                }

            });
            var fmodel = new Model({
            
                name:"Sanjay Kumar",
                youtube:"Online Web Tutor",
                team:"Profotech solutions Team"
            });
            var ModelView = Backbone.View.extend({
                initialize:function(){
                    
                    this.render();

                },
                render:function(){
                    console.log("Model View Created");
                    console.log(this.model.toJSON());//to retrieve the values into the view from model we use this method
                    console.log(this.model.get("team"));
                    

                }
            });
            var mview = new ModelView({
                model:fmodel
            });
        </script>
    </body>
</html>

O/P IN CHROME:
Model created
message.html:28 Model View Created
message.html:29 {name: "Sanjay Kumar", youtube: "Online Web Tutor", team: "Profotech solutions Team"}
message.html:30 Profotech solutions Team
-----------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <script>
            var Model = Backbone.Model.extend({
                initialize:function(){
                    console.log("Model created");
                }

            });
            var fmodel = new Model({
            
                name:"Sanjay Kumar",
                youtube:"Online Web Tutor",
                team:"Profotech solutions Team"
            });
            var ModelView = Backbone.View.extend({
                model:fmodel,
                initialize:function(){
                    
                    this.render();

                },
                render:function(){
                    console.log("Model View Created");
                    console.log(this.model.toJSON());//to retrieve the values into the view from model we use this method
                    console.log(this.model.get("team"));
                    

                }
            });
            var mview = new ModelView();
        </script>
    </body>
</html>
------------
Model data to underscore.js templates :

<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script>
            var ModelView = Backbone.View.extend({
                template:_.template("Hi I am inline template"), //inline template
                el :"#content",
                initialize:function(){
                    this.render();
                },
                render:function(){
                    console.log("View Created");
                    this.$el.html(this.template());
                }

            });
            var mview = new ModelView();
            
        </script>
    </body>
</html>
----------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script>
            var Model = Backbone.Model.extend();
            var modelObj = new Model({
                name:"Online Web tutor",
                author:"Sanjay Kumar"

            });
            var ModelView = Backbone.View.extend({
                template:_.template("Hi I am inline template"), //inline template
                el :"#content",
                initialize:function(){
                    this.render();
                },
                render:function(){
                    console.log("View Created");
                    this.$el.html(this.template());
                }

            });
            var mview = new ModelView();
            
        </script>
    </body>
</html>
O/P IN CHROME:
View Created
modelObj 
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: author: "Sanjay Kumar"name: "Online Web tutor"__proto__: Objectchanged: {}cid: "c0"_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Online Web tutor", author: "Sanjay Kumar"}_silent: {}__proto__: g.Model

-------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script>
            var Model = Backbone.Model.extend();
            var modelObj = new Model();
            modelObj.set({
                name:"Online web tutor",
                author:"Sanjay Kumar"

            });
           
            var ModelView = Backbone.View.extend({
                //template:_.template("<%=name %> and Author <%=author %>"), //inline template
                el :"#content",
                model:modelObj,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    console.log("View Created");
                    console.log(this.model.toJSON());
                    //this.$el.html(this.template(this.model.toJSON()));
                }

            });
            var mview = new ModelView();
            
        </script>
    </body>
</html>

O/P IN CHROME:
View Created
message.html:27 {name: "Online web tutor", author: "Sanjay Kumar"}
-------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script>
            var Model = Backbone.Model.extend();
            var modelObj = new Model();
            modelObj.set({
                name:"Online web tutor",
                author:"Sanjay Kumar"

            });
           
            var ModelView = Backbone.View.extend({
                //template:_.template("<%=name %> and Author <%=author %>"), //inline template
                el :"#content",
                model:modelObj,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    console.log("View Created");
                    console.log(this.model.toJSON());
                    console.log(this.model.get("name"));
                    //this.$el.html(this.template(this.model.toJSON()));

                }

            });
            var mview = new ModelView();
            
        </script>
    </body>
</html>

O/P IN CHROME:
View Created
message.html:27 {name: "Online web tutor", author: "Sanjay Kumar"}
message.html:28 Online web tutor
--------------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script>
            var Model = Backbone.Model.extend();
            var modelObj = new Model();
            modelObj.set({
                name:"Online web tutor",
                author:"Sanjay Kumar"

            });
           
            var ModelView = Backbone.View.extend({
                template:_.template("<%=name %> and Author <%=author %>"), //inline template
                el :"#content",
                model:modelObj,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    console.log("View Created");
                    //console.log(this.model.toJSON());
                    //console.log(this.model.get("name"));
                    this.$el.html(this.template(this.model.toJSON()));

                }

            });
            var mview = new ModelView();
            
        </script>
    </body>
</html>

O/P IN CHROME:
Online web tutor and Author Sanjay Kumar
-------------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script>
            var Model = Backbone.Model.extend();
            var modelObj = new Model();
            modelObj.set({
                name:"Online web tutor",
                author:"Sanjay Kumar"

            });
           
            var ModelView = Backbone.View.extend({
                template:_.template("<%=this.model.get('name') %> and Author <%=this.model.get('author') %>"), //inline template
                el :"#content",
                model:modelObj,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    console.log("View Created");
                    //console.log(this.model.toJSON());
                    //console.log(this.model.get("name"));
                    this.$el.html(this.template({
                        model:this.model.toJSON()
                    }));

                }

            });
            var mview = new ModelView();
            
        </script>
    </body>
</html>

O/P IN CHROME:
Online web tutor and Author Sanjay Kumar
--------------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script type="text/template" id="my-template"> 
            Name: <%=this.model.get('name') %> and Author: <%=this.model.get('author') %>
        </script>
        <script>
            var Model = Backbone.Model.extend();
            var modelObj = new Model();
            modelObj.set({
                name:"Online web tutor",
                author:"Sanjay Kumar"

            });
           
            var ModelView = Backbone.View.extend({
                template:_.template($("#my-template").html()), //external template
                el :"#content",
                model:modelObj,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    console.log("View Created");
                    //console.log(this.model.toJSON());
                    //console.log(this.model.get("name"));
                    this.$el.html(this.template({
                        model:this.model.toJSON()
                    }));

                }

            });
            var mview = new ModelView();
            
        </script>
    </body>
</html>

O/P:
Name: Online web tutor and Author: Sanjay Kumar
------------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script type="text/template" id="my-template"> 
            Name: <%=name %> and Author: <%=author %>
        </script>
        <script>
            var Model = Backbone.Model.extend();
            var modelObj = new Model();
            modelObj.set({
                name:"Online web tutor",
                author:"Sanjay Kumar"

            });
           
            var ModelView = Backbone.View.extend({
                template:_.template($("#my-template").html()), //external template
                el :"#content",
                model:modelObj,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    console.log("View Created");
                    //console.log(this.model.toJSON());
                    //console.log(this.model.get("name"));
                    this.$el.html(this.template(this.model.toJSON()));

                }

            });
            var mview = new ModelView();
            
        </script>
    </body>
</html>

Name: Online web tutor and Author: Sanjay Kumar
--------------
Head back to underscore.js symbol :

<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script type="text/template" id="my-template"> 
           <%=name %> ,<%=author %>,<%=id %>
        </script>
        <script>
            var Model = Backbone.Model.extend();
            var modelObj = new Model();
            modelObj.set({
                name:"Online web tutor",
                author:"Sanjay Kumar",
                id:2

            });
           
            var ModelView = Backbone.View.extend({
                template:_.template($("#my-template").html()), //external template
                el :"#content",
                model:modelObj,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    
                    //console.log(this.model.toJSON());
                    //console.log(this.model.get("name"));
                    this.$el.html(this.template(this.model.toJSON()));

                }

            });
            var mview = new ModelView();
            
        </script>
    </body>
</html>

O/P:
Online web tutor ,Sanjay Kumar,2
---------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        <script type="text/template" id="my-template">
            <% if(id>5) { %> //used to perform calculations
                <%= name %>  //is used to print to screen
            <%} else { %>
                <%=author %>
            <% } %>
        </script>
        <script>
            var Model = Backbone.Model.extend();
            var modelObj = new Model();
            modelObj.set({
                name:"Online web tutor",
                author:"Sanjay Kumar",
                id:2

            });
           
            var ModelView = Backbone.View.extend({
                template:_.template($("#my-template").html()), //external template
                el :"#content",
                model:modelObj,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    
                    //console.log(this.model.toJSON());
                    //console.log(this.model.get("name"));
                    this.$el.html(this.template(this.model.toJSON()));

                }

            });
            var mview = new ModelView();
            
        </script>
    </body>
</html>

O/P IN CHROME:
Sanjay Kumar
---------------------
Model Events in backbone.js :

<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                initialize:function(){
                    console.log("Model Constructor");
                }
            });
            var mymodel = new MyModel();
            mymodel.set({
                name:"OWT",
                author:"Sanjay Kumar"

            })
            
            
        </script>
    </body>
</html>

O/P:
Model Constructor
mymodel 
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: author: "Sanjay Kumar"name: "OWT"__proto__: Objectchanged: {}cid: "c0"_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "OWT", author: "Sanjay Kumar"}_silent: {}__proto__: g.Model
mymodel.get('author')
"Sanjay Kumar"
mymodel.toJSON()
{name: "OWT", author: "Sanjay Kumar"}
----------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                initialize:function(){
                    console.log("Model Constructor");
                }
            });
            var mymodel = new MyModel();
            mymodel.set({
                name:"<p>OWT<p>",
                author:"Sanjay Kumar"

            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    console.log(this.model.escape("name"));//output comes in html entities value (i.e) &ltp&gt;OWT&lt;p&gt;
                    console.log(this.model.get("name"));//output prints as it is given in code (i.e)<p>OWT<p>
                    console.log(this.model.toJSON());
                }


            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P CHROME:
Model Constructor
 &lt;p&gt;OWT&lt;p&gt;
 <p>OWT<p>
{name: "<p>OWT<p>", author: "Sanjay Kumar"}
-----------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                initialize:function(){
                    console.log("Model Constructor");
                }
            });
            var mymodel = new MyModel();
            mymodel.set({
                name:"<p>OWT<p>",
                author:"Sanjay Kumar"

            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    //console.log(this.model.escape("name"));//output comes in html entities value (i.e) &ltp&gt;OWT&lt;p&gt;
                    //console.log(this.model.get("name"));//output prints as it is given in code (i.e)<p>OWT<p>
                    console.log(this.model.has("name"));//it checks if the name exists under set method and returns true if exists else returns false 
                    console.log(this.model.toJSON());
                }


            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P IN CHROME:
Model Constructor
 true
{name: "<p>OWT<p>", author: "Sanjay Kumar"}
----------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                initialize:function(){
                    console.log("Model Constructor");
                }
            });
            var mymodel = new MyModel();
            mymodel.set({
                name:"<p>OWT<p>",
                author:"Sanjay Kumar"

            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    //console.log(this.model.escape("name"));//output comes in html entities value (i.e) &ltp&gt;OWT&lt;p&gt;
                    //console.log(this.model.get("name"));//output prints as it is given in code (i.e)<p>OWT<p>
                    console.log(this.model.has("name_like"));//it checks if the name exists under set method and returns true if exists else returns false 
                    console.log(this.model.toJSON());
                }


            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P IN CHROME:
Model Constructor
 false
{name: "<p>OWT<p>", author: "Sanjay Kumar"}
-----------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                initialize:function(){
                    console.log("Model Constructor");
                }
            });
            var mymodel = new MyModel();
            mymodel.set({
                name:"<p>OWT<p>",
                author:"Sanjay Kumar"

            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    if(this.model.has("name_like"))
                    {
                        console.log("Key exists");

                    }else{
                        console.log("Key not found");
                    }
                    //console.log(this.model.escape("name"));//output comes in html entities value (i.e) &ltp&gt;OWT&lt;p&gt;
                    //console.log(this.model.get("name"));//output prints as it is given in code (i.e)<p>OWT<p>
                    //console.log(this.model.has("name_like"));//it checks if the name exists under set method and returns true if exists else returns false 
                    console.log(this.model.toJSON());
                }


            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P IN CHROME:
Model Constructor
 Key not found
 {name: "<p>OWT<p>", author: "Sanjay Kumar"}
---------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                initialize:function(){
                    console.log("Model Constructor");
                }
            });
            var mymodel = new MyModel();
            mymodel.set({
                name:"<p>OWT<p>",
                author:"Sanjay Kumar"

            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    
                    if(this.model.has("author"))
                    {
                        console.log("Key exists");

                    }else{
                        console.log("Key not found");
                    }
                    //console.log(this.model.escape("name"));//output comes in html entities value (i.e) &ltp&gt;OWT&lt;p&gt;
                    //console.log(this.model.get("name"));//output prints as it is given in code (i.e)<p>OWT<p>
                    //console.log(this.model.has("name_like"));//it checks if the name exists under set method and returns true if exists else returns false 
                    console.log(this.model.toJSON());
                }


            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P IN Chrome:
Model Constructor
 Key exists
{name: "<p>OWT<p>", author: "Sanjay Kumar"}
---------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                initialize:function(){
                    console.log("Model Constructor");
                }
            });
            var mymodel = new MyModel();
            mymodel.set({
                name:"<p>OWT<p>",
                author:"Sanjay Kumar"

            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    this.model.unset("name");//we have removed name attribute from set of array.it removes the key value from array
                    console.log(this.model.toJSON());

                    /*if(this.model.has("author"))
                    {
                        console.log("Key exists");

                    }else{
                        console.log("Key not found");
                    } */
                    //console.log(this.model.escape("name"));//output comes in html entities value (i.e) &ltp&gt;OWT&lt;p&gt;
                    //console.log(this.model.get("name"));//output prints as it is given in code (i.e)<p>OWT<p>
                    //console.log(this.model.has("name_like"));//it checks if the name exists under set method and returns true if exists else returns false 
                    //console.log(this.model.toJSON());
                }


            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P IN CHROME:
Model Constructor
{author: "Sanjay Kumar"}
-----------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                initialize:function(){
                    console.log("Model Constructor");
                }
            });
            var mymodel = new MyModel();
            mymodel.set({
                name:"<p>OWT<p>",
                author:"Sanjay Kumar"

            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    this.model.clear();//it removes all of your keys from json objects
                    //this.model.unset("name");//we have removed name attribute from set of array.it removes the key value from array
                    console.log(this.model.toJSON());

                    /*if(this.model.has("author"))
                    {
                        console.log("Key exists");

                    }else{
                        console.log("Key not found");
                    } */
                    //console.log(this.model.escape("name"));//output comes in html entities value (i.e) &ltp&gt;OWT&lt;p&gt;
                    //console.log(this.model.get("name"));//output prints as it is given in code (i.e)<p>OWT<p>
                    //console.log(this.model.has("name_like"));//it checks if the name exists under set method and returns true if exists else returns false 
                    //console.log(this.model.toJSON());
                }


            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P IN CHROMRE:
Model Constructor
 {}
-----------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                defaults:{
                    name:"Default Name",
                    author:"Default Author"

                },
                initialize:function(){
                    console.log("Model Constructor");
                }
            });
            var mymodel = new MyModel();
            
            /*mymodel.set({
                name:"<p>OWT<p>",
                author:"Sanjay Kumar"

            }); */
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    //this.model.clear();//it removes all of your keys from json objects
                    //this.model.unset("name");//we have removed name attribute from set of array.it removes the key value from array
                    console.log(this.model.toJSON());

                    /*if(this.model.has("author"))
                    {
                        console.log("Key exists");

                    }else{
                        console.log("Key not found");
                    } */
                    //console.log(this.model.escape("name"));//output comes in html entities value (i.e) &ltp&gt;OWT&lt;p&gt;
                    //console.log(this.model.get("name"));//output prints as it is given in code (i.e)<p>OWT<p>
                    //console.log(this.model.has("name_like"));//it checks if the name exists under set method and returns true if exists else returns false 
                    //console.log(this.model.toJSON());
                }


            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P IN CHROME:
Model Constructor
{name: "Default Name", author: "Default Author"}
----------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                defaults:{
                    name:"Default Name",
                    author:"Default Author"

                },
                initialize:function(){
                    console.log("Model Constructor");
                }
            });
            var mymodel = new MyModel({
                name:"<p>OWT<p>",
                author:"Sanjay Kumar"

            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    //this.model.clear();//it removes all of your keys from json objects
                    //this.model.unset("name");//we have removed name attribute from set of array.it removes the key value from array
                    console.log(this.model.toJSON());

                    /*if(this.model.has("author"))
                    {
                        console.log("Key exists");

                    }else{
                        console.log("Key not found");
                    } */
                    //console.log(this.model.escape("name"));//output comes in html entities value (i.e) &ltp&gt;OWT&lt;p&gt;
                    //console.log(this.model.get("name"));//output prints as it is given in code (i.e)<p>OWT<p>
                    //console.log(this.model.has("name_like"));//it checks if the name exists under set method and returns true if exists else returns false 
                    //console.log(this.model.toJSON());
                }


            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P IN CHROME:
Model Constructor
{name: "<p>OWT<p>", author: "Sanjay Kumar"}
----------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                defaults:{
                    name:"Default Name",
                    author:"Default Author"

                },
                initialize:function(){
                    console.log("Model Constructor");
                }
            });
            var mymodel = new MyModel({
                name:"<p>OWT<p>",
               
            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    //this.model.clear();//it removes all of your keys from json objects
                    //this.model.unset("name");//we have removed name attribute from set of array.it removes the key value from array
                    console.log(this.model.toJSON());

                    /*if(this.model.has("author"))
                    {
                        console.log("Key exists");

                    }else{
                        console.log("Key not found");
                    } */
                    //console.log(this.model.escape("name"));//output comes in html entities value (i.e) &ltp&gt;OWT&lt;p&gt;
                    //console.log(this.model.get("name"));//output prints as it is given in code (i.e)<p>OWT<p>
                    //console.log(this.model.has("name_like"));//it checks if the name exists under set method and returns true if exists else returns false 
                    //console.log(this.model.toJSON());
                }


            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P IN CHROME:
Model Constructor
{name: "<p>OWT<p>", author: "Default Author"}
------------------
Model Validation in backbone.js :

<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                
                initialize:function(){
                    console.log("Model Constructor");
                }
            });
            var mymodel = new MyModel({
                name:"Sanjay Kumar",
                team:"Profotech Solutions",
                age:26
               
            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    console.log(this.model.toJSON());
                   
                }


            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P IN CHROME:
Model Constructor
{name: "Sanjay Kumar", team: "Profotech Solutions", age: 26}
------------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                
                initialize:function(){
                    console.log("Model Constructor");
                },
                validate:function(attribute){
                    if(attribute.age < 1){
                        return "Age should not be negative";
                    }
                }
            });
            var mymodel = new MyModel({
                name:"Sanjay Kumar",
                team:"Profotech Solutions",
                age:-1
               
            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    //console.log(this.model.toJSON());
                    /*if(this.model.isValid()){
                        console.log("Valid Values are there");
                    }else{
                        console.log(this.model.validationError);
                    } */
                   
                }


            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P IN CHROME:
Model Constructor
mymodel 
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: age: -1name: "Sanjay Kumar"team: "Profotech Solutions"__proto__: Objectchanged: {}cid: "c0"_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: -1}_silent: {}__proto__: g.Model
mymodel.isValid() 
false
mymodel.validationError 
undefined
-----------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                
                initialize:function(){
                    console.log("Model Constructor");
                },
                validate:function(attribute){
                    if(attribute.age < 1){
                        return "Age should not be negative";
                    }
                }
            });
            var mymodel = new MyModel({
                name:"Sanjay Kumar",
                team:"Profotech Solutions",
                age:-1
               
            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    //console.log(this.model.toJSON());
                    /*if(this.model.isValid()){
                        console.log("Valid Values are there");
                    }else{
                        console.log(this.model.validationError);
                    } */
                   
                }


            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>


mymodel.set("age",22) 
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 22}changed: {}cid: "c0"_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 22}_silent: {}__proto__: g.Model
mymodel 
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 26}changed: {}cid: "c0"_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 26}_silent: {}__proto__: g.Model
mymodel 
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 26}changed: {}cid: "c0"_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 26}_silent: {}__proto__: g.Model
mymodel.isValid() 
true
mymodel.validationError 
undefined
-----------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                
                initialize:function(){
                    console.log("Model Constructor");
                },
                validate:function(attribute){
                    if(attribute.age < 1){
                        return "Age should not be negative";
                    }
                }
            });
            var mymodel = new MyModel({
                name:"Sanjay Kumar",
                team:"Profotech Solutions",
                age:10
               
            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    //console.log(this.model.toJSON());
                    if(this.model.isValid()){
                        console.log("Valid Values are there");
                    }else{
                        console.log(this.model.validationError);
                    } 
                   
                }


            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P IN CHROME:
Model Constructor
Valid Values are there
---------------

<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                
                initialize:function(){
                    console.log("Model Constructor");
                },
                validate:function(attribute){
                    if(attribute.age < 1){
                        return "Age should not be negative";
                    }
                    if(!attribute.name){
                        return "Name is needed";
                    }
                }
                
            });
            var mymodel = new MyModel({
                name:"",
                team:"Profotech Solutions",
                age:10
               
            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    //console.log(this.model.toJSON());
                    if(this.model.isValid()){
                        console.log("Valid Values are there");
                    }else{
                        console.log(this.model.validationError);
                    } 
                   
                }


            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P IN  CHROME:
Model Constructor
undefined
--------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                
                initialize:function(){
                    console.log("Model Constructor");
                },
                validate:function(attribute){
                    if(attribute.age < 1){
                        return "Age should not be negative";
                    }
                    if(!attribute.name){
                        return "Name is needed";
                    }
                }
                
            });
            var mymodel = new MyModel({
                name:"Sanjay Kumar",
                team:"Profotech Solutions",
                age:10
               
            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    //console.log(this.model.toJSON());
                    if(this.model.isValid()){
                        console.log("Valid Values are there");
                    }else{
                        console.log(this.model.validationError);
                    } 
                   
                }


            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P IN CHROME:

Model Constructor
Valid Values are there
----------------------------
Model Change Events in backbone.js:


<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                
                initialize:function(){
                    console.log("Model Constructor");
                    this.bind("change",function(model) { //this method gets triggered in model application
                        console.log("Model Changed");
                    });
                }
                
                
            });
            var mymodel = new MyModel({
                name:"Sanjay Kumar",
                team:"Profotech Solutions",
                age:10
               
            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    
                   
                }


            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>


O/P IN CHROME:

Model Constructor
mymodel 
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: {name: "Online Web Tutor", team: "Profotech Solutions", age: 50}changed: {}cid: "c0"_callbacks: {change: {…}}_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Online Web Tutor", team: "Profotech Solutions", age: 50}_silent: {}__proto__: g.Model
mymodel.set("name","Online Web Tutor"); 
Model Changed
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: {name: "Online Web Tutor", team: "Profotech Solutions", age: 50}changed: {}cid: "c0"_callbacks: {change: {…}}_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Online Web Tutor", team: "Profotech Solutions", age: 50}_silent: {}__proto__: g.Model
mymodel.set("age",50); 
Model Changed
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: {name: "Online Web Tutor", team: "Profotech Solutions", age: 50}changed: {}cid: "c0"_callbacks: {change: {…}}_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Online Web Tutor", team: "Profotech Solutions", age: 50}_silent: {}__proto__: g.Model
------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                
                initialize:function(){
                    console.log("Model Constructor");
                    this.bind("change:name",function(model) {
                        console.log("Model Changed");
                    });
                }
                
                
            });
            var mymodel = new MyModel({
                name:"Sanjay Kumar",
                team:"Profotech Solutions",
                age:10
               
            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    
                   
                }


            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P IN CHROME:

Model Constructor
mymodel 
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 10}changed: {}cid: "c0"_callbacks: {change:name: {…}}_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 10}_silent: {}__proto__: g.Model
mymodel.set("age",22) 
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 22}changed: {}cid: "c0"_callbacks: {change:name: {…}}_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 22}_silent: {}__proto__: g.Model
mymodel.set("name","Aarthi"); 

message.html:16 Model Changed
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: {name: "Aarthi", team: "Profotech Solutions", age: 22}changed: {}cid: "c0"_callbacks: {change:name: {…}}_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Aarthi", team: "Profotech Solutions", age: 22}_silent: {}__proto__: g.Model
-------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                
                initialize:function(){
                    console.log("Model Constructor");
                    this.bind("change:name",function(model) {
                        console.log("Model Changed");
                    });
                }
                
                
            });
            var mymodel = new MyModel({
                name:"Sanjay Kumar",
                team:"Profotech Solutions",
                age:10
               
            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    this.model.on("change",function(){ //to detect model changes in view we use this method
                        console.log("Detected by view");

                    });
                                  
                }
            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P IN CHROME:
Model Constructor
mymodel 
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: age: 10name: "Sanjay Kumar"team: "Profotech Solutions"__proto__: Objectchanged: {}cid: "c0"_callbacks: {change:name: {…}, change: {…}}_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 10}_silent: {}__proto__: g.Model
mymodel.set("team","India"); 
message.html:35 Detected by view
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: {name: "Sanjay Kumar", team: "India", age: 10}changed: {}cid: "c0"_callbacks: {change:name: {…}, change: {…}}_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Sanjay Kumar", team: "India", age: 10}_silent: {}__proto__: g.Model
mymodel.set("name","Dhoni");  

message.html:16 Model Changed
message.html:35 Detected by view
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: age: 10name: "Dhoni"team: "India"__proto__: Objectchanged: {}cid: "c0"_callbacks: {change:name: {…}, change: {…}}_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Dhoni", team: "India", age: 10}_silent: {}__proto__: g.Model
-------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                
                initialize:function(){
                    console.log("Model Constructor");
                    this.bind("change",function(model) {
                        console.log("Model Changed");
                    });
                }
                
                
            });
            var mymodel = new MyModel({
                name:"Sanjay Kumar",
                team:"Profotech Solutions",
                age:10
               
            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    this.model.on("change",function(){ //to detect model changes in view we use this method
                        console.log("Detected by view");

                    });
                                  
                }
            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P IN CHROME:

Model Constructor
mymodel 
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: age: 10name: "Sanjay Kumar"team: "Profotech Solutions"__proto__: Objectchanged: {}cid: "c0"_callbacks: {change: {…}}_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 10}_silent: {}__proto__: g.Model
mymodel.set("name","Aarthi"); 

Model Changed
 Detected by view
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: {name: "Aarthi", team: "USA", age: 10}changed: {}cid: "c0"_callbacks: {change: {…}}_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Aarthi", team: "USA", age: 10}_silent: {}__proto__: g.Model
mymodel.set("team","USA");  
 Model Changed
Detected by view
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: {name: "Aarthi", team: "USA", age: 10}changed: {}cid: "c0"_callbacks: {change: {…}}_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Aarthi", team: "USA", age: 10}_silent: {}__proto__: g.Model
mymodel.set("age",52); 
Model Changed
Detected by view
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: age: 52name: "Aarthi"team: "USA"__proto__: Objectchanged: {}cid: "c0"_callbacks: {change: {…}}_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Aarthi", team: "USA", age: 52}_silent: {}__proto__: g.Model
---------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                
                initialize:function(){
                    console.log("Model Constructor");
                    this.bind("change:name",function(model) {
                        console.log("Model Changed");
                    });
                }
                
                
            });
            var mymodel = new MyModel({
                name:"Sanjay Kumar",
                team:"Profotech Solutions",
                age:10
               
            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    /*this.model.on("change",function(){ //to detect model changes in view we use this method
                        console.log("Detected by view");

                    });*/
                    this.model.bind("change:team",function(){
                        console.log("Team has changed");
                    })
                                  
                }
            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P IN CHROME:

Model Constructor
mymodel.set("team","South India");  
Team has changed
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: age: 10name: "Sanjay Kumar"team: "South India"__proto__: Objectchanged: {}cid: "c0"_callbacks: {change:name: {…}, change:team: {…}}_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Sanjay Kumar", team: "South India", age: 10}_silent: {}__proto__: g.Model
mymodel.set("name","Dhoni");  

Model Changed
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: age: 10name: "Dhoni"team: "South India"__proto__: Objectchanged: {}cid: "c0"_callbacks: {change:name: {…}, change:team: {…}}_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Dhoni", team: "South India", age: 10}_silent: {}__proto__: g.Model
--------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script>
            var MyModel = Backbone.Model.extend({
                
                initialize:function(){
                    console.log("Model Constructor");
                    this.bind("change:name",function(model) {
                        console.log("Model Changed");
                    });
                }
                
                
            });
            var mymodel = new MyModel({
                name:"Sanjay Kumar",
                team:"Profotech Solutions",
                age:10
               
            });
            var MyView = Backbone.View.extend({
                model:mymodel,
                initialize:function(){
                    this.render();
                },
                render:function(){
                    /*this.model.on("change",function(){ //to detect model changes in view we use this method
                        console.log("Detected by view");

                    });*/
                    this.model.bind("change:team",this.modelChangeEvent)
                },
                modelChangeEvent:function(){
                    console.log("Team has changed");
                }
            });
            var myViewObj = new MyView();
            
            
        </script>
    </body>
</html>

O/P IN CHORME:

Model Constructor
mymodel 

G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: age: 10name: "Sanjay Kumar"team: "Profotech Solutions"__proto__: Objectchanged: {}cid: "c0"_callbacks: {change:name: {…}, change:team: {…}}_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 10}_silent: {}__proto__: g.Model
mymodel.set("team","South India");  
 Team has changed
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: age: 10name: "Sanjay Kumar"team: "South India"__proto__: Objectchanged: {}cid: "c0"_callbacks: {change:name: {…}, change:team: {…}}_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Sanjay Kumar", team: "South India", age: 10}_silent: {}__proto__: g.Model
mymodel.set("name","Adam"); 

Model Changed
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: age: 10name: "Adam"team: "South India"__proto__: Objectchanged: {}cid: "c0"_callbacks: {change:name: {…}, change:team: {…}}_changing: false_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Adam", team: "South India", age: 10}_silent: {}__proto__: g.Model
-----------------
Model Events and listenTo event:

message.html:

<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script src="script_example.js"></script>
    </body>
</html>

script_example.js:
var MyModel = Backbone.Model.extend();
var mymodel=new MyModel({
    name:"Sanjay Kumar",
    team:"Profotech Solutions",
    age:26
});


var MyView = Backbone.View.extend({
    model:mymodel,
    initialize:function(){
        this.render();
    },
    render:function(){
        console.log("Online web tutor view is running...");

    }
});
var myViewObj = new MyView();


O/P IN CHROME:
Online web tutor view is running...
mymodel 
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c0", changed: {…}, _silent: {…}, …}attributes: age: 26name: "Sanjay Kumar"team: "Profotech Solutions"__proto__: Objectchanged: {}cid: "c0"_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 26}_silent: {}__proto__: g.Model
secondObj = mymodel.clone() 
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c2", changed: {…}, _silent: {…}, …}attributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 26}changed: {}cid: "c2"_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 26}_silent: {}__proto__: g.Model
secondObj 
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c2", changed: {…}, _silent: {…}, …}attributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 26}changed: {}cid: "c2"_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 26}_silent: {}__proto__: g.Model
secondObj.toJSON() 
{name: "Sanjay Kumar", team: "Profotech Solutions", age: 26}age: 26name: "Sanjay Kumar"team: "Profotech Solutions"__proto__: Object

---------------
message.html:

<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script src="script_example.js"></script>
    </body>
</html>  

script_example.js:
var MyModel = Backbone.Model.extend();
var mymodel=new MyModel({
    name:"Sanjay Kumar",
    team:"Profotech Solutions",
    age:26
});
var mymodelObj2 = mymodel.clone();


var MyView = Backbone.View.extend({
    model:mymodelObj2,
    initialize:function(){
        this.render();
    },
    render:function(){
        //console.log("Online web tutor view is running...");
        console.log(this.model.toJSON());

    }
});
var myViewObj = new MyView();

O/P IN CHROME:

{name: "Sanjay Kumar", team: "Profotech Solutions", age: 26}
age: 26
name: "Sanjay Kumar"
team: "Profotech Solutions"
__proto__: Object

------------ 
message.html:

<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script src="script_example.js"></script>
    </body>
</html>

script_example.js:

var MyModel = Backbone.Model.extend();
var mymodel=new MyModel({
    name:"Sanjay Kumar",
    team:"Profotech Solutions",
    age:26
});
var mymodelObj2 = mymodel.clone();


var MyView = Backbone.View.extend({
    model:mymodelObj2,
    initialize:function(){
        this.render();
    },
    render:function(){
        //console.log("Online web tutor view is running...");
        console.log(this.model.toJSON());
        

    }
});
var myViewObj = new MyView();


O/P IN CHROME:

{name: "Sanjay Kumar", team: "Profotech Solutions", age: 26}
mymodelObj2 
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c1", changed: {…}, _silent: {…}, …}attributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 26}changed: {}cid: "c1"_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Sanjay Kumar", team: "Profotech Solutions", age: 26}_silent: {}__proto__: g.Model
mymodelObj2.hasChanged() 
false

mymodelObj2.set("name","Anne") 
G.d {attributes: {…}, _escapedAttributes: {…}, cid: "c1", changed: {…}, _silent: {…}, …}
mymodelObj2.hasChanged() 
false
---------------
message.html:
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div id="content"></div>
        
        <script src="script_example.js"></script>
    </body>
</html>

script_example.js :
var MyModel = Backbone.Model.extend();
var mymodel=new MyModel({
    name:"Sanjay Kumar",
    team:"Profotech Solutions",
    age:26
});
var mymodelObj2 = mymodel.clone();


var MyView = Backbone.View.extend({
    model:mymodelObj2,
    initialize:function(){
        this.render();
    },
    render:function(){
        //console.log("Online web tutor view is running...");
        console.log(this.model.toJSON());
        mymodelObj2.set({
            name:"Neeraj Kumar",
            age:10
        }); 
        if(mymodelObj2.hasChanged){
            console.log("Value Changed");
        }else{
            console.log("Value not changed");
        } 

    }
});
var myViewObj = new MyView();
--------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var MyModel = Backbone.Model.extend();
           var mymodel=new MyModel({
               name:"Sanjay Kumar",
               team:"Profotech Solutions",
               age:26
           });

           var mymodelObj2=mymodel.clone();

           var MyView = Backbone.View.extend({
               model:mymodelObj2,
               initialize:function(){
                   this.render();
               },
               render:function(){
                   console.log(this.model.toJSON());
                   mymodelObj2.set({
                       name:"Neeraj Kumar",
                       age:10
                   });
                   if(mymodelObj2.hasChanged){
                       console.log(mymodelObj2.changedAttributes());
                   }else{
                       console.log("Value not changed");
                   }
               }
           });
           var myViewObj = new MyView();

       </script>
    </body>
</html>
----------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var MyModel = Backbone.Model.extend();
           var mymodel=new MyModel({
               name:"Sanjay Kumar",
               team:"Profotech Solutions",
               age:26
           });

           var mymodelObj2=mymodel.clone();

           var MyView = Backbone.View.extend({
               model:mymodelObj2,
               initialize:function(){
                   this.render();
               },
               render:function(){
                   console.log(this.model.toJSON());
                   mymodelObj2.set({
                       name:"Neeraj Kumar",
                       age:10
                   });
                   if(mymodelObj2.hasChanged()){
                       console.log(mymodelObj2.previous("name"));
                       console.log(mymodelObj2.changedAttributes());
                   }else{
                       console.log("Value not changed");
                   }
               }
           });
           var myViewObj = new MyView();

       </script>
    </body>
</html>
-----------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var MyModel = Backbone.Model.extend();
           var mymodel=new MyModel({
               name:"Sanjay Kumar",
               team:"Profotech Solutions",
               age:26
           });

           var mymodelObj2=mymodel.clone();

           var MyView = Backbone.View.extend({
               model:mymodelObj2,
               initialize:function(){
                   this.render();
               },
               render:function(){
                   //console.log(this.model.toJSON());
                   mymodelObj2.set({
                       name:"Neeraj Kumar",
                       age:10
                   });
                   if(mymodelObj2.hasChanged){
                       //console.log("Value Changed");
                        console.log(mymodelObj2.previous("name"));
                        console.log(mymodelObj2.previousAttributes());
                        console.log(mymodelObj2.changedAttributes());
                       
                   }else{
                       console.log("Value not changed");
                   }
               }
           });
           var myViewObj = new MyView();

       </script>
    </body>
</html>
-----------------------
listenTo : detect or listen the model values

<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var MyModel = Backbone.Model.extend();
           var mymodel=new MyModel({
               name:"Sanjay Kumar",
               team:"Profotech Solutions",
               age:26
           });

           var mymodelObj2=mymodel.clone();

           var MyView = Backbone.View.extend({
               model:mymodelObj2,
               initialize:function(){
                   this.render();
               },
               render:function(){
                   this.listenTo(this.model,"change",this.modelChange);
               },
               modelChange:function(){
                   console.log("Model changed");
                   console.log(this.model.changedAttributes());
               }
           });
           var myViewObj = new MyView();

       </script>
    </body>
</html>
--------------
Model Inheritance in backbone.js:

<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var FModel = Backbone.Model.extend({ //Parent Model
               initialize:function(){
                   console.log("Parent Model is running");
               },
               Playing:function(){
                   console.log("Parent Playing Method");
               }
           });
           var ChildModel = FModel.extend({});
           var childModel = new ChildModel();

           
       </script>
    </body>
</html>

O/P IN CHROME:

Parent Model is running
childModel.Playing() 
Parent Playing Method
-------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var FModel = Backbone.Model.extend({ //Parent Model
               initialize:function(){
                   console.log("Parent Model is running");
               },
               Playing:function(){
                   console.log("Parent Playing Method");
               }
           });
           var ChildModel = FModel.extend({
               ChildMethod:function(){
                   console.log("Child Method running");
               }
           });
           var childModel = new ChildModel();

           
       </script>
    </body>
</html>

O/P IN CHROME:
Parent Model is running
childModel.Playing() 
Parent Playing Method
undefined
childModel.ChildMethod() 
Child Method running
undefined
------------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var FModel = Backbone.Model.extend({ //Parent Model
               initialize:function(){
                   console.log("Parent Model is running");
               },
               Playing:function(){
                   console.log("Parent Playing Method");
               }
           });
           var ChildModel = FModel.extend({
               ChildMethod:function(){
                   console.log("Child Method running");
               },
               Playing:function(){
                   console.log("Child Playing method");
               }
           });
           var childModel = new ChildModel();

           
       </script>
    </body>
</html>

O/P IN CHROME:
Parent Model is running
childModel.Playing() 
Child Playing method
-------------------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var FModel = Backbone.Model.extend({ //Parent Model
               initialize:function(){
                   console.log("Parent Model is running");
               },
               Playing:function(){
                   console.log("Parent Playing Method");
               }
           });
           var ChildModel = FModel.extend({
               ChildMethod:function(){
                   console.log("Child Method running");
               },
               Playing:function(){
                   FModel.prototype.Playing.apply(this);//it calls parent Playing method
                   console.log("Child Playing method");
               }
           });
           var childModel = new ChildModel();

           
       </script>
    </body>
</html>

O/P IN CHROME:
Parent Model is running
childModel.Playing()
Parent Playing Method
Child Playing method
-----------------
Collection in backbone js:

<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var Player = Backbone.Model.extend({
               defaults:{
                   name:"Sanjay Kumar",
                   team:"India",
                   no:10
               }

           });
           var player1 = new Player({
               name:"Suresh Raina",
               team:"England",
               no:13
           });
           var player2 = new Player({
               name:"Dhoni",
               team:"Australia",
               no:7
           });
           var player3 = new Player({
               name:"Rahul",
               team:"India",
               no:90
           });
           var MyCollection = Backbone.Collection.extend({
               model:Player

           });
           var myCollectionObj = new MyCollection(player1);
           var ProjectView = Backbone.View.extend({
               collection:myCollectionObj,
               initialize:function(){
                   this.render();
               },
               render:function(){
                   console.log(this.collection.toJSON());
                   console.log("Project View Created");
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:

[{…}]0: {name: "Suresh Raina", team: "England", no: 13}length: 1__proto__: Array(0)
Project View Created
------------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var Player = Backbone.Model.extend({
               defaults:{
                   name:"Sanjay Kumar",
                   team:"India",
                   no:10
               }

           });
           var player1 = new Player({
               name:"Suresh Raina",
               team:"England",
               no:13
           });
           var player2 = new Player({
               name:"Dhoni",
               team:"Australia",
               no:7
           });
           var player3 = new Player({
               name:"Rahul",
               team:"India",
               no:90
           });
           var MyCollection = Backbone.Collection.extend({
               model:Player

           });
           var myCollectionObj = new MyCollection([player1,player2,player3]);
           var ProjectView = Backbone.View.extend({
               collection:myCollectionObj,
               initialize:function(){
                   this.render();
               },
               render:function(){
                   console.log(this.collection.toJSON());
                   console.log("Project View Created");
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:
(3) [{…}, {…}, {…}]0: {name: "Suresh Raina", team: "England", no: 13}1: {name: "Dhoni", team: "Australia", no: 7}2: {name: "Rahul", team: "India", no: 90}length: 3__proto__: Array(0)
Project View Created
----------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var Player = Backbone.Model.extend({
               defaults:{
                   name:"Sanjay Kumar",
                   team:"India",
                   no:10
               }

           });
           var player1 = new Player({
               name:"Suresh Raina",
               team:"England",
               no:13
           });
           var player2 = new Player({
               name:"Dhoni",
               team:"Australia",
               no:7
           });
           var player3 = new Player({
               name:"Rahul",
               team:"India",
               no:90
           });
           var MyCollection = Backbone.Collection.extend({
               model:Player

           });
           var myCollectionObj = new MyCollection([player1,player2,player3]);
           var ProjectView = Backbone.View.extend({
               collection:myCollectionObj,
               initialize:function(){
                   this.render();
               },
               render:function(){
                   //console.log(this.collection.toJSON());
                   /* syntax of each method in JQuery
                   $.each(obj,function(i,item){

                   })
                   */
                   _.each(this.collection.toJSON(),function(model_sample){//to iterate to each set of values we use "each" method
                       console.log(model_sample);
                   });
                   console.log("Project View Created");
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:
{name: "Suresh Raina", team: "England", no: 13}
{name: "Dhoni", team: "Australia", no: 7}
{name: "Rahul", team: "India", no: 90}
Project View Created
-----------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var Player = Backbone.Model.extend({
               defaults:{
                   name:"Sanjay Kumar",
                   team:"India",
                   no:10
               }

           });
           var player1 = new Player({
               name:"Suresh Raina",
               team:"England",
               no:13
           });
           var player2 = new Player({
               name:"Dhoni",
               team:"Australia",
               no:7
           });
           var player3 = new Player({
               name:"Rahul",
               team:"India",
               no:90
           });
           var MyCollection = Backbone.Collection.extend({
               model:Player

           });
           var myCollectionObj = new MyCollection([player1,player2,player3]);
           var ProjectView = Backbone.View.extend({
               collection:myCollectionObj,
               initialize:function(){
                   this.render();
               },
               render:function(){
                   //console.log(this.collection.toJSON());
                   /* syntax of each method in JQuery
                   $.each(obj,function(i,item){

                   })
                   */
                   _.each(this.collection.toJSON(),function(model_sample){ //to iterate to each set of values we use "each" method
                       console.log(model_sample.name);
                   });
                   console.log("Project View Created");
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:
Suresh Raina
Dhoni
Rahul
Project View Created
-------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var Player = Backbone.Model.extend({
               defaults:{
                   name:"Sanjay Kumar",
                   team:"India",
                   no:10
               }

           });
           var player1 = new Player({
               name:"Suresh Raina",
               team:"England",
               no:13
           });
           var player2 = new Player({
               name:"Dhoni",
               team:"Australia",
               no:7
           });
           var player3 = new Player({
               name:"Rahul",
               team:"India",
               no:90
           });
           var MyCollection = Backbone.Collection.extend({
               model:Player

           });
           var myCollectionObj = new MyCollection([player1,player2,player3]);
           var ProjectView = Backbone.View.extend({
               collection:myCollectionObj,
               initialize:function(){
                   this.render();
               },
               render:function(){
                   //console.log(this.collection.toJSON());
                   /* syntax of each method in JQuery
                   $.each(obj,function(i,item){

                   })
                   */
                   _.each(this.collection.toJSON(),function(model){
                       //console.log(model_sample.name);
                       console.log("Name:"+model.name+ ";;"+"Team name:"+model.team+";;"+"and their number:"+model.no);
                   });
                   console.log("Project View Created");
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:
Name:Suresh Raina;;Team name:England;;and their number:13
Name:Dhoni;;Team name:Australia;;and their number:7
Name:Rahul;;Team name:India;;and their number:90
Project View Created

<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var Player = Backbone.Model.extend({ //model defined
               defaults:{
                   name:"Sanjay Kumar",
                   team:"India",
                   no:10
               }

           });
           var player1 = new Player({ //model objects
               name:"Suresh Raina",
               team:"England",
               no:13
           });
           var player2 = new Player({
               name:"Dhoni",
               team:"Australia",
               no:7
           });
           var player3 = new Player({
               name:"Rahul",
               team:"India",
               no:90
           });
           var MyCollection = Backbone.Collection.extend({ //collection defined
               model:Player //assigned model

           });
           var myCollectionObj = new MyCollection([player1,player2,player3]); //colection object created
           var ProjectView = Backbone.View.extend({
               collection:myCollectionObj,
               initialize:function(){
                   this.render();
               },
               render:function(){
                   //console.log(this.collection.toJSON());
                   /* syntax of each method in JQuery
                   $.each(obj,function(i,item){

                   })
                   */
                   _.each(this.collection.toJSON(),function(model){
                       //console.log(model_sample.name);
                       console.log("Name:"+model.name+ ";;"+"Team name:"+model.team+";;"+"and their number:"+model.no);
                   });
                   console.log("Project View Created");
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:
Name:Suresh Raina;;Team name:England;;and their number:13
Name:Dhoni;;Team name:Australia;;and their number:7
Name:Rahul;;Team name:India;;and their number:90
Project View Created
---------------------
Collection Events in backbone.js:

<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var Player = Backbone.Model.extend();//model defined               
          
           var player1 = new Player({ //model objects
               name:"Suresh Raina",
               team:"India",
               no:13
           });
           var player2 = new Player({
               name:"Chris Gayle",
               team:"Australia",
               no:7
           });
           
           var PlayerCollection = Backbone.Collection.extend({ //collection defined
               model:Player //assigned model

           });
           var collectionObj = new PlayerCollection(); //colection object created
           collectionObj.add(player1);
           collectionObj.add(player2);
           console.log(collectionObj.toJSON());
           var ProjectView = Backbone.View.extend({
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:
(2) [{…}, {…}]0: name: "Suresh Raina"no: 13team: "India"__proto__: Object
1: name: "Chris Gayle"no: 7team: "Australia"__proto__: Objectlength: 2__proto__: Array(0)

(2) [{…}, {…}]
0: {name: "Suresh Raina", team: "India", no: 13}
1: {name: "Chris Gayle", team: "Australia", no: 7}
length: 2
__proto__: Array(0)
-------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var Player = Backbone.Model.extend();//model defined               
          
           var player1 = new Player({ //model objects
               name:"Suresh Raina",
               team:"India",
               no:13
           });
           var player2 = new Player({
               name:"Chris Gayle",
               team:"Australia",
               no:7
           });
           
           var PlayerCollection = Backbone.Collection.extend({ //collection defined
               model:Player //assigned model

           });
           var collectionObj = new PlayerCollection(); //colection object created
           collectionObj.add([player1,player2]);
           //collectionObj.add(player2);
           console.log(collectionObj.toJSON());
           var ProjectView = Backbone.View.extend({
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:

(2) [{…}, {…}]
0: {name: "Suresh Raina", team: "India", no: 13}
1: {name: "Chris Gayle", team: "Australia", no: 7}
length: 2
__proto__: Array(0)
-----------------

<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var Player = Backbone.Model.extend();//model defined               
          
           var player1 = new Player({ //model objects
               name:"Suresh Raina",
               team:"India",
               no:13
           });
           var player2 = new Player({
               name:"Chris Gayle",
               team:"Australia",
               no:7
           });
           
           var PlayerCollection = Backbone.Collection.extend({ //collection defined
               model:Player //assigned model

           });
           var collectionObj = new PlayerCollection(); //colection object created
           //collectionObj.add([player1,player2]);
           //collectionObj.add(player2);
           collectionObj.unshift(player1);
           collectionObj.unshift(player2);
           console.log(collectionObj.toJSON());
           var ProjectView = Backbone.View.extend({
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:
(2) [{…}, {…}]
0: {name: "Chris Gayle", team: "Australia", no: 7}
1: {name: "Suresh Raina", team: "India", no: 13}
length: 2
__proto__: Array(0)
-----------------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var Player = Backbone.Model.extend();//model defined               
          
           var player1 = new Player({ //model objects
               name:"Suresh Raina",
               team:"India",
               no:13
           });
           var player2 = new Player({
               name:"Chris Gayle",
               team:"Australia",
               no:7
           });
           
           var PlayerCollection = Backbone.Collection.extend({ //collection defined
               model:Player //assigned model

           });
           var collectionObj = new PlayerCollection(); //colection object created
           //collectionObj.add([player1,player2]);
           //collectionObj.add(player2);
           collectionObj.unshift([player1,player2]);
           //collectionObj.unshift(player2);
           console.log(collectionObj.toJSON());
           var ProjectView = Backbone.View.extend({
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>
--------------------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var Player = Backbone.Model.extend();//model defined               
          
           var player1 = new Player({ //model objects
               name:"Suresh Raina",
               team:"India",
               no:13
           });
           var player2 = new Player({
               name:"Chris Gayle",
               team:"Australia",
               no:7
           });
           
           var PlayerCollection = Backbone.Collection.extend({ //collection defined
               model:Player //assigned model

           });
           var collectionObj = new PlayerCollection(); //colection object created
           //collectionObj.add([player1,player2]);
           //collectionObj.add(player2);
           //collectionObj.unshift([player1,player2]);
           //collectionObj.unshift(player2);
           collectionObj.push(player1);
           collectionObj.push(player2);
           console.log(collectionObj.toJSON());
           var ProjectView = Backbone.View.extend({
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:
(2) [{…}, {…}]
0: {name: "Suresh Raina", team: "India", no: 13}
1: {name: "Chris Gayle", team: "Australia", no: 7}
length: 2
__proto__: Array(0)
-----------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var Player = Backbone.Model.extend();//model defined               
          
           var player1 = new Player({ //model objects
               name:"Suresh Raina",
               team:"India",
               no:13
           });
           var player2 = new Player({
               name:"Chris Gayle",
               team:"Australia",
               no:7
           });
           var player3 = new Player({
               name:"Adam Gilchrist",
               team:"New Zealand",
               no:90
           });
           
           var PlayerCollection = Backbone.Collection.extend({ //collection defined
               model:Player //assigned model

           });
           var collectionObj = new PlayerCollection(); //colection object created
           collectionObj.add([player1,player2]);
           collectionObj.add(player3,{at:1});
           /*
           add,push -->each time it adds each data to last index
           unshift -->each time it adds each data to first index at top

           */
           //collectionObj.add([player1,player2]);
           //collectionObj.add(player2);

           //collectionObj.unshift([player1,player2]);
           //collectionObj.unshift(player2);

           //collectionObj.push([player1,player2]);
           //collectionObj.push(player2);
           console.log(collectionObj.toJSON());
           var ProjectView = Backbone.View.extend({
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:

(3) [{…}, {…}, {…}]
0: {name: "Suresh Raina", team: "India", no: 13}
1: {name: "Adam Gilchrist", team: "New Zealand", no: 90}
2: {name: "Chris Gayle", team: "Australia", no: 7}
length: 3
__proto__: Array(0)
-------------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var Player = Backbone.Model.extend();//model defined               
          
           var player1 = new Player({ //model objects
               name:"Suresh Raina",
               team:"India",
               no:13
           });
           var player2 = new Player({
               name:"Chris Gayle",
               team:"Australia",
               no:7
           });
           var player3 = new Player({
               name:"Adam Gilchrist",
               team:"New Zealand",
               no:90
           });
           
           var PlayerCollection = Backbone.Collection.extend({ //collection defined
               model:Player //assigned model

           });
           var collectionObj = new PlayerCollection(); //colection object created
           collectionObj.add([player1,player2]);
           collectionObj.add(player3,{at:1});
           /*
           add,push -->each time it adds each data to last index
           unshift -->each time it adds each data to first index at top

           */
           //collectionObj.add([player1,player2]);
           //collectionObj.add(player2);

           //collectionObj.unshift([player1,player2]);
           //collectionObj.unshift(player2);

           //collectionObj.push([player1,player2]);
           //collectionObj.push(player2);
           console.log(collectionObj.toJSON());
           collectionObj.remove(player1); //it removes player1 from collectionObj array
           console.log(collectionObj.toJSON());
           var ProjectView = Backbone.View.extend({
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:

(3) [{…}, {…}, {…}]0: {name: "Suresh Raina", team: "India", no: 13}1: {name: "Adam Gilchrist", team: "New Zealand", no: 90}2: {name: "Chris Gayle", team: "Australia", no: 7}length: 3__proto__: Array(0)
message.html:49 (2) [{…}, {…}]0: {name: "Adam Gilchrist", team: "New Zealand", no: 90}1: {name: "Chris Gayle", team: "Australia", no: 7}length: 2__proto__: Array(0)
------------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var Player = Backbone.Model.extend();//model defined               
          
           var player1 = new Player({ //model objects
               name:"Suresh Raina",
               team:"India",
               no:13
           });
           var player2 = new Player({
               name:"Chris Gayle",
               team:"Australia",
               no:7
           });
           var player3 = new Player({
               name:"Adam Gilchrist",
               team:"New Zealand",
               no:90
           });
           
           var PlayerCollection = Backbone.Collection.extend({ //collection defined
               model:Player //assigned model

           });
           var collectionObj = new PlayerCollection(); //colection object created
           collectionObj.add([player1,player2]);
           collectionObj.add(player3,{at:1});
           /*
           add,push -->each time it adds each data to last index
           unshift -->each time it adds each data to first index at top

           */
           //collectionObj.add([player1,player2]);
           //collectionObj.add(player2);

           //collectionObj.unshift([player1,player2]);
           //collectionObj.unshift(player2);

           //collectionObj.push([player1,player2]);
           //collectionObj.push(player2);
           console.log(collectionObj.toJSON());
           //collectionObj.remove(player1);
           collectionObj.pop(); //---> it pops out last element data i.e Chris Gayle data from array
           console.log(collectionObj.toJSON());
           var ProjectView = Backbone.View.extend({
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:
(3) [{…}, {…}, {…}]0: {name: "Suresh Raina", team: "India", no: 13}1: {name: "Adam Gilchrist", team: "New Zealand", no: 90}2: {name: "Chris Gayle", team: "Australia", no: 7}length: 3__proto__: Array(0)
message.html:50 (2) [{…}, {…}]0: {name: "Suresh Raina", team: "India", no: 13}1: {name: "Adam Gilchrist", team: "New Zealand", no: 90}length: 2__proto__: Array(0)
---------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var Player = Backbone.Model.extend();//model defined               
          
           var player1 = new Player({ //model objects
               name:"Suresh Raina",
               team:"India",
               no:13
           });
           var player2 = new Player({
               name:"Chris Gayle",
               team:"Australia",
               no:7
           });
           var player3 = new Player({
               name:"Adam Gilchrist",
               team:"New Zealand",
               no:90
           });
           
           var PlayerCollection = Backbone.Collection.extend({ //collection defined
               model:Player //assigned model

           });
           var collectionObj = new PlayerCollection(); //colection object created
           collectionObj.add([player1,player2]);
           collectionObj.add(player3,{at:1});
           /*
           add,push -->each time it adds each data to last index of the array
           unshift -->each time it adds each data to first index at top of the array

           */
           //collectionObj.add([player1,player2]);
           //collectionObj.add(player2);

           //collectionObj.unshift([player1,player2]);
           //collectionObj.unshift(player2);

           //collectionObj.push([player1,player2]);
           //collectionObj.push(player2);
           console.log(collectionObj.toJSON());

           //collectionObj.remove(player1);  //it removes player1 from collectionObj array

           //collectionObj.pop(); //---> it pops out last element data i.e Chris Gayle data from array
           
           collectionObj.shift(); //--->it removes the first index element data from the array i.e Suresh Raina data is removed from array
           console.log(collectionObj.toJSON());
           var ProjectView = Backbone.View.extend({
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:
(3) [{…}, {…}, {…}]0: {name: "Suresh Raina", team: "India", no: 13}1: {name: "Adam Gilchrist", team: "New Zealand", no: 90}2: {name: "Chris Gayle", team: "Australia", no: 7}length: 3__proto__: Array(0)
message.html:54 (2) [{…}, {…}]0: {name: "Adam Gilchrist", team: "New Zealand", no: 90}1: {name: "Chris Gayle", team: "Australia", no: 7}length: 2__proto__: Array(0)
-------------------------------------------------
Collection to underscore.js template:

<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var Player = Backbone.Model.extend();//model defined               
          
           var player1 = new Player({ //model objects
               name:"Suresh Raina",
               team:"India",
               no:13
           });
           var player2 = new Player({//model objects
               name:"Chris Gayle",
               team:"Australia",
               no:7
           });
           var player3 = new Player({//model objects
               name:"Adam Gilchrist",
               team:"New Zealand",
               no:90
           });
           
           var PlayerCollection = Backbone.Collection.extend({ //collection defined
               model:Player //assigned model

           });
           var objCollection = new PlayerCollection([player1,player2,player3]);
           var ProjectView = Backbone.View.extend({
               collection:objCollection,
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   console.log(this.collection);
                   
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHORME:

G.d {length: 3, models: Array(3), _byId: {…}, _byCid: {…}}length: 3models: Array(3)0: G.dattributes: {name: "Suresh Raina", team: "India", no: 13}changed: {}cid: "c0"collection: G.d {length: 3, models: Array(3), _byId: {…}, _byCid: {…}}_callbacks: {all: {…}}_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Suresh Raina", team: "India", no: 13}_silent: {}__proto__: g.Model1: G.dattributes: {name: "Chris Gayle", team: "Australia", no: 7}changed: {}cid: "c1"collection: G.d {length: 3, models: Array(3), _byId: {…}, _byCid: {…}}_callbacks: {all: {…}}_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Chris Gayle", team: "Australia", no: 7}_silent: {}__proto__: g.Model2: G.dattributes: {name: "Adam Gilchrist", team: "New Zealand", no: 90}changed: {}cid: "c2"collection: G.d {length: 3, models: Array(3), _byId: {…}, _byCid: {…}}_callbacks: {all: {…}}_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Adam Gilchrist", team: "New Zealand", no: 90}_silent: {}__proto__: g.Modellength: 3__proto__: Array(0)_byCid: {c0: G.d, c1: G.d, c2: G.d}_byId: {}__proto__: g.Collection
-----------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var Player = Backbone.Model.extend();//model defined               
          
           var player1 = new Player({ //model objects
               name:"Suresh Raina",
               team:"India",
               no:13
           });
           var player2 = new Player({//model objects
               name:"Chris Gayle",
               team:"Australia",
               no:7
           });
           var player3 = new Player({//model objects
               name:"Adam Gilchrist",
               team:"New Zealand",
               no:90
           });
           
           var PlayerCollection = Backbone.Collection.extend({ //collection defined
               model:Player //assigned model

           });
           var objCollection = new PlayerCollection([player1,player2,player3]);
           var ProjectView = Backbone.View.extend({
               collection:objCollection,
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   console.log(this.collection);
                   _.each(this.collection.toJSON(),function(model){
                       console.log(model);

                   });
                   
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:

G.d {length: 3, models: Array(3), _byId: {…}, _byCid: {…}}length: 3models: Array(3)0: G.dattributes: {name: "Suresh Raina", team: "India", no: 13}changed: {}cid: "c0"collection: G.d {length: 3, models: Array(3), _byId: {…}, _byCid: {…}}_callbacks: {all: {…}}_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Suresh Raina", team: "India", no: 13}_silent: {}__proto__: g.Model1: G.dattributes: {name: "Chris Gayle", team: "Australia", no: 7}changed: {}cid: "c1"collection: G.d {length: 3, models: Array(3), _byId: {…}, _byCid: {…}}_callbacks: {all: {…}}_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Chris Gayle", team: "Australia", no: 7}_silent: {}__proto__: g.Model2: G.dattributes: {name: "Adam Gilchrist", team: "New Zealand", no: 90}changed: {}cid: "c2"collection: G.d {length: 3, models: Array(3), _byId: {…}, _byCid: {…}}_callbacks: {all: {…}}_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Adam Gilchrist", team: "New Zealand", no: 90}_silent: {}__proto__: g.Modellength: 3__proto__: Array(0)_byCid: {c0: G.d, c1: G.d, c2: G.d}_byId: {}__proto__: g.Collection
 {name: "Suresh Raina", team: "India", no: 13}name: "Suresh Raina"no: 13team: "India"__proto__: Object
 {name: "Chris Gayle", team: "Australia", no: 7}name: "Chris Gayle"no: 7team: "Australia"__proto__: Object
 {name: "Adam Gilchrist", team: "New Zealand", no: 90}name: "Adam Gilchrist"no: 90team: "New Zealand"__proto__: Object
-----------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>
       <script>
           var Player = Backbone.Model.extend();//model defined               
          
           var player1 = new Player({ //model objects
               name:"Suresh Raina",
               team:"India",
               no:13
           });
           var player2 = new Player({//model objects
               name:"Chris Gayle",
               team:"Australia",
               no:7
           });
           var player3 = new Player({//model objects
               name:"Adam Gilchrist",
               team:"New Zealand",
               no:90
           });
           
           var PlayerCollection = Backbone.Collection.extend({ //collection defined
               model:Player //assigned model

           });
           var objCollection = new PlayerCollection([player1,player2,player3]);
           var ProjectView = Backbone.View.extend({
               collection:objCollection,
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   console.log(this.collection);
                   _.each(this.collection.toJSON(),function(model){
                       console.log(model.name);

                   });
                   
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:

G.d {length: 3, models: Array(3), _byId: {…}, _byCid: {…}}length: 3models: Array(3)0: G.dattributes: {name: "Suresh Raina", team: "India", no: 13}changed: {}cid: "c0"collection: G.d {length: 3, models: Array(3), _byId: {…}, _byCid: {…}}_callbacks: {all: {…}}_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Suresh Raina", team: "India", no: 13}_silent: {}__proto__: g.Model1: G.dattributes: {name: "Chris Gayle", team: "Australia", no: 7}changed: {}cid: "c1"collection: G.d {length: 3, models: Array(3), _byId: {…}, _byCid: {…}}_callbacks: {all: {…}}_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Chris Gayle", team: "Australia", no: 7}_silent: {}__proto__: g.Model2: G.dattributes: {name: "Adam Gilchrist", team: "New Zealand", no: 90}changed: {}cid: "c2"collection: G.d {length: 3, models: Array(3), _byId: {…}, _byCid: {…}}_callbacks: {all: {…}}_escapedAttributes: {}_pending: {}_previousAttributes: {name: "Adam Gilchrist", team: "New Zealand", no: 90}_silent: {}__proto__: g.Modellength: 3__proto__: Array(0)_byCid: {c0: G.d, c1: G.d, c2: G.d}_byId: {}__proto__: g.Collection
Suresh Raina
Chris Gayle
Adam Gilchrist
----------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>

        <div id="content"></div>
        <script type="text/template" id="tmpl-first">
            Hello World
        
        </script>
    
       <script>
           var Player = Backbone.Model.extend();//model defined               
          
           var player1 = new Player({ //model objects
               name:"Suresh Raina",
               team:"India",
               no:13
           });
           var player2 = new Player({//model objects
               name:"Chris Gayle",
               team:"Australia",
               no:7
           });
           var player3 = new Player({//model objects
               name:"Adam Gilchrist",
               team:"New Zealand",
               no:90
           });
           
           var PlayerCollection = Backbone.Collection.extend({ //collection defined
               model:Player //assigned model

           });
           var objCollection = new PlayerCollection([player1,player2,player3]);
           var ProjectView = Backbone.View.extend({
               el:"#content",
               template:_.template($("#tmpl-first").html()), //here we are passing template to view 
               collection:objCollection,
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   this.$el.html(this.template());
                   
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

----------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>

        <div id="content"></div>
        <script type="text/template" id="tmpl-first">
            <%_.each(collection,function(model){ %>
                <%= model.name %>

            <%}) %>

        </script>
    
       <script>
           var Player = Backbone.Model.extend();//model defined               
          
           var player1 = new Player({ //model objects
               name:"Suresh Raina",
               team:"India",
               no:13
           });
           var player2 = new Player({//model objects
               name:"Chris Gayle",
               team:"Australia",
               no:7
           });
           var player3 = new Player({//model objects
               name:"Adam Gilchrist",
               team:"New Zealand",
               no:90
           });
           
           var PlayerCollection = Backbone.Collection.extend({ //collection defined
               model:Player //assigned model

           });
           var objCollection = new PlayerCollection([player1,player2,player3]);
           var ProjectView = Backbone.View.extend({
               el:"#content",
               template:_.template($("#tmpl-first").html()), //here we are passing template to view 
               collection:objCollection,
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   this.$el.html(this.template({
                       collection :this.collection.toJSON()
                   }));
                   
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:
Suresh Raina Chris Gayle Adam Gilchrist
----------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>

        <div id="content"></div>
        <script type="text/template" id="tmpl-first">
            <%_.each(collection,function(model){ %>
                <%= model.name %> <br/>

            <%}) %>

        </script>
    
       <script>
           var Player = Backbone.Model.extend();//model defined               
          
           var player1 = new Player({ //model objects
               name:"Suresh Raina",
               team:"India",
               no:13
           });
           var player2 = new Player({//model objects
               name:"Chris Gayle",
               team:"Australia",
               no:7
           });
           var player3 = new Player({//model objects
               name:"Adam Gilchrist",
               team:"New Zealand",
               no:90
           });
           
           var PlayerCollection = Backbone.Collection.extend({ //collection defined
               model:Player //assigned model

           });
           var objCollection = new PlayerCollection([player1,player2,player3]);
           var ProjectView = Backbone.View.extend({
               el:"#content",
               template:_.template($("#tmpl-first").html()), //here we are passing template to view 
               collection:objCollection,
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   this.$el.html(this.template({
                       collection :this.collection.toJSON()
                   }));
                   
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:
Suresh Raina
Chris Gayle
Adam Gilchrist
------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>

        <div id="content"></div>
        <script type="text/template" id="tmpl-first">
            <%_.each(collection,function(model){ %>
                Name: <%= model.name %> and he belongs to team : <%=model.team %> <br/>

            <%}) %>

        </script>
    
       <script>
           var Player = Backbone.Model.extend();//model defined               
          
           var player1 = new Player({ //model objects
               name:"Suresh Raina",
               team:"India",
               no:13
           });
           var player2 = new Player({//model objects
               name:"Chris Gayle",
               team:"Australia",
               no:7
           });
           var player3 = new Player({//model objects
               name:"Adam Gilchrist",
               team:"New Zealand",
               no:90
           });
           
           var PlayerCollection = Backbone.Collection.extend({ //collection defined
               model:Player //assigned model

           });
           var objCollection = new PlayerCollection([player1,player2,player3]);
           var ProjectView = Backbone.View.extend({
               el:"#content",
               template:_.template($("#tmpl-first").html()), //here we are passing template to view 
               collection:objCollection,
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   this.$el.html(this.template({
                       collection :this.collection.toJSON() //passing collection object to this template
                   }));
                   
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:
Name: Suresh Raina and he belongs to team : India
Name: Chris Gayle and he belongs to team : Australia
Name: Adam Gilchrist and he belongs to team : New Zealand
-----------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>

        <div id="content"></div>
        <script type="text/template" id="tmpl-first">
            <%_.each(collection.toJSON(),function(model){ %>
                Name: <%= model.name %> and he belongs to team : <%=model.team %> <br/>

            <%}) %>

        </script>
    
       <script>
           var Player = Backbone.Model.extend();//model defined               
          
           var player1 = new Player({ //model objects
               name:"Suresh Raina",
               team:"India",
               no:13
           });
           var player2 = new Player({//model objects
               name:"Chris Gayle",
               team:"Australia",
               no:7
           });
           var player3 = new Player({//model objects
               name:"Adam Gilchrist",
               team:"New Zealand",
               no:90
           });
           
           var PlayerCollection = Backbone.Collection.extend({ //collection defined
               model:Player //assigned model

           });
           var objCollection = new PlayerCollection([player1,player2,player3]);
           var ProjectView = Backbone.View.extend({
               el:"#content",
               template:_.template($("#tmpl-first").html()), //here we are passing template to view 
               collection:objCollection,
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   this.$el.html(this.template({
                       collection :this.collection //passing collection object to this template
                   }));
                   
               }
           });
           var mview = new ProjectView();
       </script>
    </body>
</html>

O/P IN CHROME:

Name: Suresh Raina and he belongs to team : India
Name: Chris Gayle and he belongs to team : Australia
Name: Adam Gilchrist and he belongs to team : New Zealand
-----------
Underscore js Methods in backbone.js:

<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>

        <div id="content"></div>
        
       <script>
           var FModel = Backbone.Model.extend();//model defined  
           var FCollection = Backbone.Collection.extend({ //collection defined
               model:FModel //assigned model

           });             
          
           var player1 = new FModel({ //model objects
               name:"Ricky Ponting",
               team:"Australia",
               no:1
           });
           var player2 = new FModel({//model objects
               name:"Sachin",
               team:"India",
               no:7
           });
           var player3 = new FModel({//model objects
               name:"Chris Gayle",
               team:"West Indies",
               no:90
           });
           
           
           var fcollection = new FCollection();
           fcollection.add([player1,player2,player3]);
           var FView = Backbone.View.extend({
               collection:fcollection,
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   console.log("running...");
                   
               }
           });
           new FView();
       </script>
    </body>
</html>

O/P IN CHROME:running ...
---------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>

        <div id="content"></div>
        
       <script>
           var FModel = Backbone.Model.extend();//model defined  
           var FCollection = Backbone.Collection.extend({ //collection defined
               model:FModel //assigned model

           });             
          
           var player1 = new FModel({ //model objects
               name:"Ricky Ponting",
               team:"Australia",
               no:1
           });
           var player2 = new FModel({//model objects
               name:"Sachin",
               team:"India",
               no:7
           });
           var player3 = new FModel({//model objects
               name:"Chris Gayle",
               team:"West Indies",
               no:90
           });
           
           
           var fcollection = new FCollection();
           fcollection.add([player1,player2,player3]);
           var FView = Backbone.View.extend({
               collection:fcollection,
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   console.log(this.collection.toJSON());
                   
               }
           });
           new FView();
       </script>
    </body>
</html>

O/P IN CHROME:
(3) [{…}, {…}, {…}]
0: {name: "Ricky Ponting", team: "Australia", no: 1}
1: {name: "Sachin", team: "India", no: 7}
2: {name: "Chris Gayle", team: "West Indies", no: 90}
length: 3
__proto__: Array(0)
------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>

        <div id="content"></div>
        
       <script>
           var FModel = Backbone.Model.extend();//model defined  
           var FCollection = Backbone.Collection.extend({ //collection defined
               model:FModel //assigned model

           });             
          
           var player1 = new FModel({ //model objects
               name:"Ricky Ponting",
               team:"Australia",
               no:1
           });
           var player2 = new FModel({//model objects
               name:"Sachin",
               team:"India",
               no:7
           });
           var player3 = new FModel({//model objects
               name:"Chris Gayle",
               team:"West Indies",
               no:90
           });
           
           
           var fcollection = new FCollection();
           fcollection.add([player1,player2,player3]);
           var FView = Backbone.View.extend({
               collection:fcollection,
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   //console.log(this.collection.toJSON());
                   //_.each method:
                   _.each(this.collection.toJSON(),function(model){
                       console.log(model.name+","+model.team);
                   });
                   
               }
           });
           new FView();
       </script>
    </body>
</html>

O/P IN CHROME:
Ricky Ponting,Australia
Sachin,India
Chris Gayle,West Indies
------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>

        <div id="content"></div>
        
       <script>
           var FModel = Backbone.Model.extend();//model defined  
           var FCollection = Backbone.Collection.extend({ //collection defined
               model:FModel //assigned model

           });             
          
           var player1 = new FModel({ //model objects
               name:"Ricky Ponting",
               team:"Australia",
               no:1
           });
           var player2 = new FModel({//model objects
               name:"Sachin",
               team:"India",
               no:1
           });
           var player3 = new FModel({//model objects
               name:"Chris Gayle",
               team:"West Indies",
               no:9
           });
           
           
           var fcollection = new FCollection();
           fcollection.add([player1,player2,player3]);
           var FView = Backbone.View.extend({
               collection:fcollection,
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   //console.log(this.collection.toJSON());

                   //_.each method:
                   /*_.each(this.collection.toJSON(),function(model){
                       console.log(model.name+","+model.team);
                   }); */ 

                   //_.where method:
                  /* var playerdata = _.where(this.collection.toJSON(),{no:1});
                   console.log(playerdata); */ //--> Output of this method will be all the collection data in array that has no as 1 
                                            // here both Ricky Ponting and Sachin has no as 1 so it displays both the data of those players

                   //_.findWhere method:
                   /*var playerdata1 = _.findWhere(this.collection.toJSON(),{no:1});
                   console.log(playerdata1); */ //--> Output of this method will only fetch first value in array whose no is 1.
                                               // as collection array has both Ricky and Sachin no as 1 it only fetches the first data i.e Ricky will only be displayed as output

                    //_.find method:
                    var playerdata = _.find(this.collection.toJSON(),function(model){
                        if(model.no>1){
                            return model.name;
                        }
                    });
                    console.log(playerdata);                      
                   
               }
           });
           new FView();
       </script>
    </body>
</html>

O/P IN CHROME:
{name: "Chris Gayle", team: "West Indies", no: 9}
name: "Chris Gayle"
no: 9
team: "West Indies"
__proto__: Object
---------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>

        <div id="content"></div>
        
       <script>
           var FModel = Backbone.Model.extend();//model defined  
           var FCollection = Backbone.Collection.extend({ //collection defined
               model:FModel //assigned model

           });             
          
           var player1 = new FModel({ //model objects
               name:"Ricky Ponting",
               team:"Australia",
               no:1
           });
           var player2 = new FModel({//model objects
               name:"Sachin",
               team:"India",
               no:4
           });
           var player3 = new FModel({//model objects
               name:"Chris Gayle",
               team:"West Indies",
               no:9
           });
           
           
           var fcollection = new FCollection();
           fcollection.add([player1,player2,player3]);
           var FView = Backbone.View.extend({
               collection:fcollection,
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   //console.log(this.collection.toJSON());

                   //_.each method:
                   /*_.each(this.collection.toJSON(),function(model){
                       console.log(model.name+","+model.team);
                   }); */ 

                   //_.where method:
                  /* var playerdata = _.where(this.collection.toJSON(),{no:1});
                   console.log(playerdata); */ //--> Output of this method will be all the collection data in array that has no as 1 
                                            // here both Ricky Ponting and Sachin has no as 1 so it displays both the data of those players

                   //_.findWhere method:
                   /*var playerdata1 = _.findWhere(this.collection.toJSON(),{no:1});
                   console.log(playerdata1); */ //--> Output of this method will only fetch first value in array whose no is 1.
                                               // as collection array has both Ricky and Sachin no as 1 it only fetches the first data i.e Ricky will only be displayed as output

                    //_.find method:
                    /*var playerdata = _.find(this.collection.toJSON(),function(model){
                        if(model.no>1){
                            return model.name;
                        }
                    });
                    console.log(playerdata); */ //--> Output of this method will only fetch first value whose nois greater than 1 
                    //here both Chris and sachin have no greater than 1 but in output first data i.e Sachin data will only be displayed as output.       
                   
               }
           });
           new FView();
       </script>
    </body>
</html>

O/P IN CHROME:
{name: "Sachin", team: "India", no: 4}
name: "Sachin"
no: 4
team: "India"
__proto__: Object
----------------
<html>
    <head>
       <script src="jquery-3.5.1.min.js"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
       <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
    </head>
    <body>

        <div id="content"></div>
        
       <script>
           var FModel = Backbone.Model.extend();//model defined  
           var FCollection = Backbone.Collection.extend({ //collection defined
               model:FModel //assigned model

           });             
          
           var player1 = new FModel({ //model objects
               name:"Ricky Ponting",
               team:"Australia",
               no:1
           });
           var player2 = new FModel({//model objects
               name:"Sachin",
               team:"India",
               no:4
           });
           var player3 = new FModel({//model objects
               name:"Chris Gayle",
               team:"West Indies",
               no:9
           });
           
           
           var fcollection = new FCollection();
           fcollection.add([player1,player2,player3]);
           var FView = Backbone.View.extend({
               collection:fcollection,
               
               initialize:function(){
                   this.render();
               },
               render:function(){
                   //console.log(this.collection.toJSON());

                   //_.each method:
                   /*_.each(this.collection.toJSON(),function(model){
                       console.log(model.name+","+model.team);
                   }); */  //-->it iterates through each data in array and displays all values as output

                   //_.where method:
                  /* var playerdata = _.where(this.collection.toJSON(),{no:1});
                   console.log(playerdata); */ //--> Output of this method will be all the collection data in array that has no as 1 
                                            // here both Ricky Ponting and Sachin has no as 1 so it displays both the data of those players

                   //_.findWhere method:
                   /*var playerdata1 = _.findWhere(this.collection.toJSON(),{no:1});
                   console.log(playerdata1); */ //--> Output of this method will only fetch first value in array whose no is 1.
                                               // as collection array has both Ricky and Sachin no as 1 it only fetches the first data i.e Ricky will only be displayed as output

                    //_.find method:
                    /*var playerdata = _.find(this.collection.toJSON(),function(model){
                        if(model.no>1){
                            return model.name;
                        }
                    });
                    console.log(playerdata); */ //--> Output of this method will only fetch first value whose no greater than 1 
                    //here both Chris and sachin have no greater than 1 but in output first data i.e Sachin data will only be displayed as output.       
                    
                    //_.filter method:
                    /*var playerdata = _.filter(this.collection.toJSON(),function(model){
                        if(model.no>1){
                            return model.name;
                        }
                    });
                    console.log(playerdata); */ //--> filter method will filter all elements in array according to
                    //given conditions and it returns all matching values as output. here both chris and sachin data will be displayed

                    //_.pluck method
                    var playerdata = _.pluck(this.collection.toJSON(),"team");
                    console.log(playerdata); // --> it iterates over each player data from array and according to key  passed(teams)
                    //it will take those values from an array i.e "all players teams data is displayed as output"
               }
           });
           new FView();
       </script>
    </body>
</html>

O/P IN CHROME:
(3) ["Australia", "India", "West Indies"]
0: "Australia"
1: "India"
2: "West Indies"
length: 3
__proto__: Array(0)
---------------------------------------
<!DOCTYPE html>
<html>
   <head>
      <title>Widget Manipulations in jQuery UI</title>
      <link rel="stylesheet" href="C:/Users/amuthaiya/Downloads/python_codes/new_style.css" >
      <link rel="stylesheet" href="C:/Users/amuthaiya/Downloads/python_codes/javascript_library/jquery-ui-1.12.1/jquery-ui-1.12.1/jquery-ui.css">
      <link rel="stylesheet" href="C:/Users/amuthaiya/Downloads/python_codes/javascript_library/jquery-ui-1.12.1/jquery-ui-1.12.1/jquery-ui.structure.css">
      <link rel="stylesheet" href="C:/Users/amuthaiya/Downloads/python_codes/javascript_library/jquery-ui-1.12.1/jquery-ui-1.12.1/jquery-ui.theme.css">
   </head>
   <body>
      <h2>Widget Manipulations in jQuery UI</h2>
      <button id="actionbtn">CHANGE</button><br><br>
      <div id="dateinput" title="My Calendar"></div>
      
      <div id="messagebox" title="Messagebox">
         <h3>This just a dummy title</h3>
         <img src="C:/Users/amuthaiya/Downloads/python_codes/images/csk_black.jpg" width="200px">
      </div>
      <br>
      <div id="panels" style="width:80%">
         <div>Telusko Learning</div>
         <div>Telusko learning is <b> one </b> of the largest tech educational youtube 
         channels in India</div>
         <h3>Simple Snippets</h3>
         <p>Nature is the gift of mother earth to all humankind and other living organisms. It constitutes Greenery, Soil, Air, Water and all physical factors that are the pillars of lives living here. Nature is also called a human attribute in behavioral terminology. The natural environment which is in physical form is called nature.
            Nature is beautiful, nature is vast to define. In various religious rituals, nature is worshipped. The natural elements present naturally on earth are the main source of life. All elements are interrelated with each other. There is no substitute for natural elements. In the fast-growing world, humans process natural elements for their use. But the rawness and originality only come from nature.

            Nature is affected by human activities and thus nature is losing its quality. Air Pollution and Water Pollution are the main sources of nature’s depletion. The single fully grown tree produces oxygen sufficient enough for ten people.

            So, definitely, the amount of oxygen released by forest is sufficient for a city or town. Nature is a medicine; nature is the base of various industries. However, it is said that nature is a giver but is also a taker. It means that natural calamities like earthquakes, volcano eruptions, floods, cyclones. These disasters occurred naturally and it causes serious destruction.

            Sunrays and fresh air are a blessing for our health. Various positive effects we can draw from nature on our bodies. People prefer natural places for their rehabilitation and vacations. In the United States, people prefer to raise their children in the countryside. Their main motive is to introduce their children to natural beauty.

         </p>
         <h3>MKHBD</h3>
         <p>This is one of my favorite channels</p>
      
      
      </div>

      
      
   </body>
   <script src="C:/Users/amuthaiya/Downloads/python_codes/javascript_library/jquery-3.5.1.min.js" type="text/javascript" ></script>
   <script src="C:/Users/amuthaiya/Downloads/python_codes/javascript_library/jquery-ui-1.12.1/jquery-ui-1.12.1/jquery-ui.js" type="text/javascript"></script>
   <script>
   $(document).ready(function(){
      $("#dateinput").datepicker({
         numberOfMonths:1,
         changeYear:true,
         changeMonth:true,
         showWeek:true,
         weekheader:"wk no",
         showOtherMonths:true,
         minDate:new Date(2017,0,5),
         maxDate:new Date(2021,0,5)

      });
      $("#messagebox").dialog({
         title:"Custom Message Box",
         draggable:true,
         resizable:true,
         height:300,
         width:300,
         modal:false,
      });
      $("#panels").accordion({
         collapsible:true,
         event:"click",
         animate:300,
         active:0,
         heightStyle:false,
         icons:{
            header:"ui-icon-plus",
            activeHeader:"ui-icon-minus"
         }
      });
      $("#actionbtn").click(function(){
         //getter method
         //var height = $("#messagebox").dialog("option","height");
         //alert(height);

         //setter method
         //$("#messagebox").dialog("option","height",600);
         //$("#messagebox").dialog("option","draggable",false);
         //$("#messagebox").dialog("option","resizable",false);

         $("#dateinput").datepicker("option","numberOfMonths",3);
         

      });

   });    
   </script>
   
   
</html><!DOCTYPE html>
<html>
    <head>
        <title></title>
        <script src="C:/Users/amuthaiya/Downloads/python_codes/javascript_library/jquery-3.5.1.min.js" type="text/javascript" ></script>
        <script>
            $(document).ready(function(){
                $("#btn").click(function(){
                    $("#test").load("data.txt",{
                        Name:"Aarthi",LastName:"Muthaiya"
                    },function(){
                        alert("Hi there!");
                    });

                });
                
            });

        </script>
    </head>
    <body>
        <div id="test">
            <p>This is the first content!</p>
        </div>
        <button id="btn">Click to change</button>


    </body>
</html>


-------------------------------------------------------------------------------------------------------------------------------------------------------
Selenium :

package edureka;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class FirstScript {
	public static void main(String args[])throws InterruptedException{
		System.setProperty("webdriver.chrome.driver", "C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe");
		WebDriver driver=new ChromeDriver();
		driver.manage().window().maximize();
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
		driver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);
		driver.get("https://login.yahoo.com/");
		driver.findElement(By.xpath("//input[@id='login-username']")).sendKeys("edureka@yahoo.com");
		Thread.sleep(10000);
		driver.findElement(By.xpath("//input[@id='login-signin']")).click();
		
		
	}

}

-------------
package co.edureka;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class SeleniumWebElements {

	public static void main(String[] args) throws InterruptedException {
		// TODO Auto-generated method stub
		System.setProperty("webdriver.chrome.driver","C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe");
		WebDriver driver=new ChromeDriver();
		driver.get("https://www.amazon.in/");
		driver.manage().window().maximize();
		Thread.sleep(4000);
		driver.findElement(By.id("twotabsearchtextbox")).sendKeys("Poco F1");
		Thread.sleep(4000);
		driver.findElement(By.id("nav-search-submit-button")).click();
		driver.findElement(By.linkText("Samsung")).click();
		driver.navigate().to("http://edureka.co/blog");
		Thread.sleep(4000);
		driver.navigate().back();
		driver.quit();
		

	}

}
---------------
http://selenium-release.storage.googleapis.com/index.html

package selenium.demo;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class Demo {

	public static void main(String[] args) throws InterruptedException {
		System.setProperty("webdriver.chrome.driver","C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe");
		WebDriver driver=new ChromeDriver();
		driver.get("http://www.gmail.com/");
		driver.manage().window().maximize();
		driver.findElement(By.id("identifierId")).sendKeys("aarthimuthaiya99@gmail.com");
		Thread.sleep(2000);
		driver.findElement(By.className("VfPpkd-RLmnJb")).click();
		Thread.sleep(2000);
		String at=driver.getTitle();
		String et="gmail";
		driver.close();
		if(at.equalsIgnoreCase(et)) {
			System.out.println("Test Successful");
			
		}
		else {
			System.out.println("Test failed");
		}
		

	}

}
--------------
package edureka;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

public class FirstScript {
	public static void main(String args[])throws InterruptedException{
		System.setProperty("webdriver.chrome.driver","C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe");
		WebDriver driver=new ChromeDriver();
		driver.manage().window().maximize();
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
		driver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);
		driver.get("https://twitter.com/");
		driver.findElement(By.linkText("Sign up")).click();
		driver.findElement(By.xpath("//input[@name='name']")).sendKeys("Edureka");
		driver.findElement(By.name("phone_number")).sendKeys("+91-7397467161");
		Thread.sleep(1000);
		driver.findElement(By.xpath("//span[contains(text(),'Next')]")).click();
		
		
	}

}

---------------
package edureka;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

public class FirstScript {
	public static void main(String args[])throws InterruptedException{
		System.setProperty("webdriver.chrome.driver","C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe");
		WebDriver driver=new ChromeDriver();
		driver.manage().window().maximize();
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
		driver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);
		driver.get("https://login.yahoo.com/");
		//WebElement username=driver.findElement(By.id("identifierId"));
		//username.sendKeys("edureka@gmail.com");
		
		//driver.findElement(By.id("identifierId")).sendKeys("edureka@gmail.com");
		
		//driver.findElement(By.linkText("q")).sendKeys("Selenium");
		//Thread.sleep(2000);
		//driver.findElement(By.name("btnK")).click();
		
		//driver.findElement(By.linkText("Forgot username?")).click();
		
		//driver.findElement(By.cssSelector("#login-username")).sendKeys("edureka@yahoo.com");
		//Thread.sleep(2000);
		//driver.findElement(By.cssSelector("#login-signin")).click();
		
		//driver.findElement(By.partialLinkText("Forgot")).click();
		
		//driver.findElement(By.xpath("//input[@id='login-username']")).sendKeys("edureka@yahoo.com");
		//Thread.sleep(2000);
		//driver.findElement(By.xpath("//input[@id='login-username'] ")).click();
		
		
		
	}

}
---------
package css_selectors;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class DemoClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.setProperty("webdriver.chrome.driver","C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe");
		WebDriver driver=new ChromeDriver();
		driver.get("https://www.ebay.com/");
		driver.manage().window().maximize();
		JavascriptExecutor js=(JavascriptExecutor) driver;
		driver.findElement(By.cssSelector("#gh-ac")).sendKeys("OnePlus6T");
		driver.findElement(By.cssSelector("#gh-btn")).click();
		js.executeScript("window.scrollBy(0,1000)");

	}

}

----------------
C:\selenium\geckodriver-v0.29.0-win64

package css_selectors;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

public class DemoClass {

	public static void main(String[] args) {
		
		System.setProperty("webdriver.gecko.driver","C:\\selenium\\geckodriver-v0.29.0-win64\\geckodriver.exe");
		WebDriver driver=new FirefoxDriver();
		driver.manage().window().maximize();
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
		driver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);
		driver.get("https://www.ebay.com/");
		
		driver.findElement(By.xpath("//input[@id='gh-ac']")).sendKeys("Guitar");
		//driver.findElement(By.cssSelector("#gh-btn")).click();
		WebElement searchIcon = driver.findElement(By.xpath("//input[@id='gh-btn']"));
		searchIcon.click();
		

	}

}
--------------
//img[@alt='Facebook'] ; //button[normalize-space()='Log In']

package css_selectors;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class WaitsDemo {

	public static void main(String[] args) throws InterruptedException {
		System.setProperty("webdriver.chrome.driver","C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe");
		WebDriver driver=new ChromeDriver();
		driver.manage().window().maximize();
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
		driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
		driver.get("https://login.yahoo.com/");
		driver.findElement(By.xpath("//input[@id='login-username']")).sendKeys("edureka@yahoo.com");
		Thread.sleep(3000);
		driver.findElement(By.xpath("//input[@id='login-signin']")).click();
	}

}

------------
package css_selectors;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class WaitsDemo {

	public static void main(String[] args) throws InterruptedException {
		System.setProperty("webdriver.chrome.driver","C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe");
		WebDriver driver=new ChromeDriver();
		driver.manage().window().maximize();
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
		driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
		driver.get("https://www.facebook.com/r.php");
		//driver.findElement(By.xpath("//input[@id='login-username']")).sendKeys("edureka@yahoo.com");
		//Thread.sleep(3000);
		//driver.findElement(By.xpath("//input[@id='login-signin']")).click();
		WebElement firstname=driver.findElement(By.name("firstname"));
		WebElement lastname=driver.findElement(By.name("lastname"));
		sendKeys(driver,firstname,10,"Edureka");
		sendKeys(driver,lastname,20,"Youtube");
	}
	public static void sendKeys(WebDriver driver1,WebElement element,int timeout,String value)
	{
		new WebDriverWait(driver1,timeout).until(ExpectedConditions.visibilityOf(element));
		element.sendKeys(value);
	}

}
------------
package css_selectors;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class WaitsDemo {

	public static void main(String[] args) throws InterruptedException {
		System.setProperty("webdriver.chrome.driver","C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe");
		WebDriver driver=new ChromeDriver();
		driver.manage().window().maximize();
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
		driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
		driver.get("https://en-gb.facebook.com/login/");
		//driver.findElement(By.xpath("//input[@id='login-username']")).sendKeys("edureka@yahoo.com");
		//Thread.sleep(3000);
		//driver.findElement(By.xpath("//input[@id='login-signin']")).click();
		
		//WebElement firstname=driver.findElement(By.name("firstname"));
		//WebElement lastname=driver.findElement(By.name("lastname"));
		//sendKeys(driver,firstname,10,"Edureka");
		//sendKeys(driver,lastname,20,"Youtube");
		
		WebElement forgotAccount=driver.findElement(By.linkText("Forgotten account?"));
		clickOn(driver,forgotAccount,10);
	}
	/*public static void sendKeys(WebDriver driver1,WebElement element,int timeout,String value)
	{
		new WebDriverWait(driver1,timeout).until(ExpectedConditions.visibilityOf(element));
		element.sendKeys(value);
	}*/
	public static void clickOn(WebDriver driver1,WebElement element,int timeout)
	{
		new WebDriverWait(driver1,timeout).until(ExpectedConditions.elementToBeClickable(element));
		element.click();
	}

}
------------
package css_selectors;



import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class SeleniumException {

	public static void main(String[] args) throws InterruptedException {
		// TODO Auto-generated method stub
		System.setProperty("webdriver.chrome.driver","C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe");
		WebDriver driver=new ChromeDriver();
		driver.get("https://www.google.com");
		Thread.sleep(3000);
		try {
		driver.findElement(By.name("fake")).click();
		}
		catch(NoSuchElementException e) {
			System.out.println("element is not found");
			System.out.println("Hello");
		}
		System.out.println("Hello2");

	}

}
-----------
package css_selectors;



import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class SeleniumException {

	public static void main(String[] args) throws InterruptedException {
		// TODO Auto-generated method stub
		System.setProperty("webdriver.chrome.driver","C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe");
		WebDriver driver=new ChromeDriver();
		driver.get("https://www.google.com");
		Thread.sleep(3000);
		try {
		driver.findElement(By.name("fake")).click();
		}
		catch(NoSuchElementException e) {
			System.out.println("element is not found");
			System.out.println("Hello");
			throw(e);
		}
		System.out.println("Hello2");

	}

}
------------
package css_selectors;



import org.openqa.selenium.By;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class SeleniumException {

	public static void main(String[] args) throws InterruptedException {
		// TODO Auto-generated method stub
		System.setProperty("webdriver.chrome.driver","C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe");
		WebDriver driver=new ChromeDriver();
		driver.get("https://www.google.com");
		Thread.sleep(2000);
		try {
		driver.switchTo().alert().accept();
		}
		catch(NoAlertPresentException e) {
			e.printStackTrace();
		}
		

	}

}
-----------
package css_selectors;

import org.openqa.selenium.By;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class SeleniumException {

	public static void main(String[] args) throws InterruptedException {
		// TODO Auto-generated method stub
		System.setProperty("webdriver.chrome.driver","C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe");
		WebDriver driver=new ChromeDriver();
		driver.get("https://www.google.com");
		driver.switchTo().window("Fail");
		driver.close();
		

	}

}
--------------
package css_selectors;

import org.openqa.selenium.By;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class SeleniumException {

	public static void main(String[] args) throws InterruptedException {
		// TODO Auto-generated method stub
		System.setProperty("webdriver.chrome.driver","C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe");
		WebDriver driver=new ChromeDriver();
		driver.get("https://www.google.com");
		driver.switchTo().window("Fail");
		driver.close();
		

	}

}
-------------
package selenium.demo;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.events.WebDriverEventListener;

public class EventCapture implements WebDriverEventListener{

	@Override
	public void afterAlertAccept(WebDriver arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void afterAlertDismiss(WebDriver arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void afterChangeValueOf(WebElement arg0, WebDriver arg1, CharSequence[] arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void afterClickOn(WebElement arg0, WebDriver arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void afterFindBy(By arg0, WebElement arg1, WebDriver arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void afterNavigateBack(WebDriver arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void afterNavigateForward(WebDriver arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void afterNavigateRefresh(WebDriver arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void afterNavigateTo(String arg0, WebDriver arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void afterScript(String arg0, WebDriver arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void beforeAlertAccept(WebDriver arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void beforeAlertDismiss(WebDriver arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void beforeChangeValueOf(WebElement arg0, WebDriver arg1, CharSequence[] arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void beforeClickOn(WebElement arg0, WebDriver arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void beforeFindBy(By arg0, WebElement arg1, WebDriver arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void beforeNavigateBack(WebDriver arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void beforeNavigateForward(WebDriver arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void beforeNavigateRefresh(WebDriver arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void beforeNavigateTo(String arg0, WebDriver arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void beforeScript(String arg0, WebDriver arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onException(Throwable arg0, WebDriver arg1) {
		// TODO Auto-generated method stub
		
	}
	
	
}



------------
package selenium.demo;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.events.EventFiringWebDriver;

public class ListenerMainClass {

	public static void main(String[] args) throws InterruptedException {
		System.setProperty("webdriver.chrome.driver","C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe");
		WebDriver driver=new ChromeDriver();
		driver.manage().window().maximize();
		JavascriptExecutor js=(JavascriptExecutor)driver;
		EventFiringWebDriver eventHandler=new EventFiringWebDriver(driver);
		EventCapture eCapture = new EventCapture();
		//registering with EventFiringWebDriver
		//register method allows to register our implementation of WebDriverEventListener to listen
		eventHandler.register(eCapture);
		//navigating to the webpage "www.edureka.co"
		eventHandler.navigate().to("https://www.edureka.co/blog/");
		js.executeScript("window.scrollBy(0,400)");
		Thread.sleep(5000);
		//eventHandler.findElement(By.linkText("Software Testing")).click();
		//navigating to the webpage "www.edureka.co/all-courses"
		eventHandler.navigate().to("https://www.edureka.co/all-courses");
		//navigating back to the first page
		Thread.sleep(5000);
		eventHandler.navigate().back();
		eventHandler.quit();
		//unregister allows to detach
		eventHandler.unregister(eCapture);
		System.out.println("End of Listeners Class");
		

	}

}
--------------
package selenium.demo;

import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;

public class ListenerTest implements ITestListener{
	@Override
	public void onFinish(ITestContext Result) {
		
	}
	@Override
	public void onStart(ITestContext Result) {
	    
	  }
	@Override
	 public void onTestFailedButWithinSuccessPercentage(ITestResult Result) {
	    
	  }
	@Override
	public void onTestFailure(ITestResult Result) {
		System.out.println("The name of the testcase failed is:"+Result.getName());
	    
	  }
	@Override
	public  void onTestSkipped(ITestResult Result) {
	    System.out.println("The name of the testcase skipped is:"+Result.getName());
	  }
	@Override
	public void onTestStart(ITestResult Result) {
		System.out.println("testcase started:"+Result.getName());
	  }


	
	


}
------------
package selenium.demo;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;

@Listeners(ListenerTest.class)

public class TestCases {
	public WebDriver driver;


@Test
public void Login() throws Exception{
	 System.setProperty("webdriver.chrome.driver","C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe");
	 driver=new ChromeDriver();
	 driver.get("https://www.edureka.co/");
	 JavascriptExecutor js=(JavascriptExecutor)driver;
	 driver.manage().window().maximize();
	 driver.findElement(By.className(".search_input_result")).sendKeys("Test Automation Engineer Masters Program");
	 driver.findElement(By.xpath("//div[@class='search_header']")).click();
	 js.executeScript("window.scrollBy(0,500)");
	 Thread.sleep(3000);
	 js.executeScript("window.scrollBy(0,700)");
	 Thread.sleep(4000);
	 js.executeScript("window.scrollBy(0,700)");
	 Thread.sleep(4000);
	
}
@Test
public void TestToFail() {
	System.out.println("This method to test fail");
	Assert.assertTrue(false);
}
}
------------
package selenium.demo;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.Test;


public class TestNG_Example {
	public String baseUrl="https://www.edureka.co/";
	String driverPath="C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe";
	public WebDriver driver;
	
@Test
public void verifyHomepageTitle() {
	System.out.println("Launching Chrome Browser");
	System.setProperty("webdriver.chrome.driver", driverPath);
	driver=new ChromeDriver();
	driver.get(baseUrl);
	String expectedTitle="Instructor-Led Online Training with 24X7 Lifetime Support | Edureka";
	String actualTitle=driver.getTitle();
	Assert.assertEquals(actualTitle,expectedTitle);
	driver.close();
}

}
------------
package selenium.demo;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;


public class TestNG_Example {
	public String baseUrl="https://www.edureka.co/";
	String driverPath="C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe";
	public WebDriver driver;
	
@BeforeTest
public void launchBrowser() {
	System.out.println("Launching Chrome Browser");
	System.setProperty("webdriver.chrome.driver", driverPath);
	driver=new ChromeDriver();
	driver.get(baseUrl);
	
}
@Test
public void verifyHomepageTitle() {
	String expectedTitle="Instructor-Led Online Training with 24X7 Lifetime Support | Edureka";
	String actualTitle=driver.getTitle();
	Assert.assertEquals(actualTitle,expectedTitle);
}
@AfterTest
public void terminateBrowser() {
	driver.close();
}

}
-------------
package selenium.demo;

import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class testngAnnotation {
	@Test
	public void testCase1() {
		System.out.println("in test case 1");
	}
	@Test
	public void testCase2() {
		System.out.println("in test case 2");
		
	}
	@BeforeMethod
	public void beforeMethod() {
		System.out.println("in before method");
		
	}
	@AfterMethod
	public void afterMethod() {
		System.out.println("in after method");
	}
	@BeforeClass
	public void beforeClass() {
		System.out.println("in Before Class");
		
	}
	@AfterClass
	public void afterClass() {
		System.out.println("in After Class");
		
	}
	@BeforeTest
	public void beforeTest() {
		System.out.println("in Before Test");
	}
	@AfterTest
	public void afterTest() {
		System.out.println("in After Test");
	}
	@BeforeSuite
	public void beforeSuite() {
		System.out.println("in Before Suite");
	}
	@AfterSuite
	public void afterSuite() {
		System.out.println("in After Suite");
	}
	

}
-------------
package selenium.demo;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

public class CrossBrowserScript {
	WebDriver driver;
	
@BeforeTest
@Parameters("browser")
public void setup(String browser)throws Exception{
//check if parameter passed from TestNG is 'firefox'
if(browser.equalsIgnoreCase("firefox")) {
//create firefox instance
System.setProperty("webdriver.gecko.driver","C:\\selenium\\geckodriver-v0.29.0-win64\\geckodriver.exe");
driver=new FirefoxDriver();
}
//check if parameter passed as 'chrome'
else if(browser.equalsIgnoreCase("chrome")){
//set path to chromedriver.exe
System.setProperty("webdriver.chrome.driver","C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe");
driver=new ChromeDriver();
	
}
else {
throw new Exception("Browser is not correct");
}
driver.manage().timeouts().implicitlyWait(10,TimeUnit.SECONDS);
}

@Test
public void testParameterWithXML() throws InterruptedException{
driver.get("https://www.edureka.co/");
WebElement Login=driver.findElement(By.linkText("Log In"));
//hit login button
Login.click();
Thread.sleep(4000);
WebElement userName=driver.findElement(By.id("si_popup_email"));
//fill username
userName.sendKeys("aarthimuthaiya99@gmail.com");
Thread.sleep(4000);
WebElement password=driver.findElement(By.id("si_popup_passwd"));
//fill password
password.sendKeys("aarthi1803");
Thread.sleep(6000);

WebElement Next=driver.findElement(By.xpath("/html[1]/body[1]/div[6]/div[1]/div[1]/div[2]/div[3]/form[1]/button[1]"));
//Hit search button
Next.click();
Thread.sleep(4000);
WebElement search=driver.findElement(By.xpath("/html[1]/body[1]/app-root[1]/app-mycourse-main[1]/section[1]/app-header[1]/header[1]/nav[1]/div[1]/div[2]/ul[1]/li[1]/div[2]/div[1]/div[1]/input[1]"));
//fill search box
search.sendKeys("Selenium");
Thread.sleep(4000);

WebElement searchbtn =driver.findElement(By.xpath("/html[1]/body[1]/app-root[1]/app-mycourse-main[1]/section[1]/app-header[1]/header[1]/nav[1]/div[1]/div[2]/ul[1]/li[1]/div[2]/div[1]/div[1]/i[1]"));
searchbtn.click();
}
}
---------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="TestSuite" thread-count="2" parallel="tests">
<test name="ChromeTest">
<parameter name="browser" value="Chrome"/>
<classes>
<class name="selenium.demo.CrossBrowserScript">
</class>
</classes>
</test>
<test name="FirefoxTest">
<parameter name="browser" value="Firefox"/>
<classes>
<class name="selenium.demo.CrossBrowserScript">
</class>
</classes>
</test>
</suite>
------------
package selenium.demo;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;

public class demo_actions {

	public static void main(String[] args) throws InterruptedException {
		System.setProperty("webdriver.chrome.driver","C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe");
		 WebDriver driver=new ChromeDriver();
		 driver.get("https://jqueryui.com/droppable/");
		 driver.switchTo().frame(0);
		 WebElement SourceElement=driver.findElement(By.id("draggable"));
		 WebElement TargetElement=driver.findElement(By.id("droppable"));
		 Actions action=new Actions(driver);
		 Thread.sleep(3000);
		 action.dragAndDrop(SourceElement, TargetElement).build().perform();
		 Thread.sleep(3000);
		 driver.quit();

	}

}
-----------
package selenium.demo;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;

public class demo_actions {

	public static void main(String[] args) throws InterruptedException {
		System.setProperty("webdriver.chrome.driver","C:\\selenium\\chromedriver_win32 (1)\\chromedriver.exe");
		 WebDriver driver=new ChromeDriver();
		 driver.get("https://jqueryui.com/droppable/");
		 driver.switchTo().frame(0);
		 WebElement SourceElement=driver.findElement(By.id("draggable"));
		 WebElement TargetElement=driver.findElement(By.id("droppable"));
		 Actions action=new Actions(driver);
		 Thread.sleep(3000);
		 //action.dragAndDrop(SourceElement, TargetElement).build().perform();
		 action.clickAndHold(SourceElement).moveToElement(TargetElement).release().build().perform();
		 Thread.sleep(3000);
		 driver.quit();

	}

}
--------------------------------------------------
mysql --local-infile=1 -uroot -proot



CREATE TABLE boats (
id INT NOT NULL PRIMARY KEY,
name VARCHAR(40),
type VARCHAR(10),
owner_id INT NOT NULL,
date_made DATE NOT NULL,
rental_price FLOAT
);


 show global variables like 'local_infile';

LOAD DATA LOCAL INFILE "C:/Users/amuthaiya/Downloads/boats.csv" INTO TABLE boatdb.boats
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n'
IGNORE 1 LINES
(id, name, type, owner_id, @datevar, rental_price)
set date_made = STR_TO_DATE(@datevar,'%d/%m/%Y');



------------------------------------------------

//current quarter year:
        var now = new Date();
        var quarter = Math.floor((now.getMonth() / 3));
        var firstDate = new Date(now.getFullYear(), quarter * 3, 1);
        var endDate = new Date(firstDate.getFullYear(), firstDate.getMonth() + 3, 0);
        document.write(firstDate+ " "+endDate);
        //O/P:Thu Apr 01 2021 00:00:00 GMT+0530 (India Standard Time) Wed Jun 30 2021 00:00:00 GMT+0530 (India Standard Time)

        //previous quarter year:
        /*var d = new Date();
        var quarter = Math.floor((d.getMonth() / 3));
        var firstDate = new Date(d.getFullYear(), quarter * 3 - 3, 1);
        var endDate = new Date(firstDate.getFullYear(), firstDate.getMonth() + 3, 0);
        document.write(firstDate+ " "+endDate);*/
        //O/P:Fri Jan 01 2021 00:00:00 GMT+0530 (India Standard Time) Wed Mar 31 2021 00:00:00 GMT+0530 (India Standard Time)

----------
//Previous Quarter Year
    function start_4(){
        
        var d = new Date();
        var quarter = Math.floor((d.getMonth() / 3));
        

        if(quarter==0){
            var currentYear = new Date().getFullYear();
            var previousYear =  currentYear-1;
            var firstDate = new Date(previousYear, quarter * 3 - 3, 1);
            var endDate = new Date(firstDate.getFullYear(), firstDate.getMonth() + 3, 0);
            alert(firstDate.toDateString('dd/mon/yyyy')+";"+endDate.toDateString('dd/mon/yyyy'));
        }
        

        if(quarter==1){
        var firstDate = new Date(d.getFullYear(), quarter * 3 - 3, 1);
        var endDate = new Date(firstDate.getFullYear(), firstDate.getMonth() + 3, 0);
        alert(firstDate.toDateString('dd/mon/yyyy')+";"+endDate.toDateString('dd/mon/yyyy'));
        }
        
        else if(quarter==2){
        var firstDate = new Date(d.getFullYear(), quarter * 3 - 3, 1);
        var endDate = new Date(firstDate.getFullYear(), firstDate.getMonth() + 3, 0);
        alert(firstDate.toDateString('dd/mon/yyyy')+";"+endDate.toDateString('dd/mon/yyyy'));

        }

        else if(quarter==3){
        var firstDate = new Date(d.getFullYear(), quarter * 3 - 3, 1);
        var endDate = new Date(firstDate.getFullYear(), firstDate.getMonth() + 3, 0);
        alert(firstDate.toDateString('dd/mon/yyyy')+";"+endDate.toDateString('dd/mon/yyyy'));

        }

        else if(quarter==4){
        var firstDate = new Date(d.getFullYear(), quarter * 3 - 3, 1);
        var endDate = new Date(firstDate.getFullYear(), firstDate.getMonth() + 3, 0);
        alert(firstDate.toDateString('dd/mon/yyyy')+";"+endDate.toDateString('dd/mon/yyyy'));

        }

    }
----------
//Previous Quarter Year
    function start_4(){
        
        var d = new Date(2021,0,1);
        var quarter = Math.floor((d.getMonth() / 3));
        

        if(quarter==0){
            var currentYear = d.getFullYear();
            var previousYear =  currentYear-1;
            var firstDate = new Date(previousYear, quarter * 3 - 3, 1);
            var endDate = new Date(firstDate.getFullYear(), firstDate.getMonth() + 3, 0);
            alert(firstDate.toDateString('dd/mon/yyyy')+";"+endDate.toDateString('dd/mon/yyyy'));
        }
        
        else if(quarter==1){
        var firstDate = new Date(d.getFullYear(), quarter * 3 - 3, 1);
        var endDate = new Date(firstDate.getFullYear(), firstDate.getMonth() + 3, 0);
        alert(firstDate.toDateString('dd/mon/yyyy')+";"+endDate.toDateString('dd/mon/yyyy'));
        }
        
        else if(quarter==2){
        var firstDate = new Date(d.getFullYear(), quarter * 3 - 3, 1);
        var endDate = new Date(firstDate.getFullYear(), firstDate.getMonth() + 3, 0);
        alert(firstDate.toDateString('dd/mon/yyyy')+";"+endDate.toDateString('dd/mon/yyyy'));

        }

        else if(quarter==3){
        var firstDate = new Date(d.getFullYear(), quarter * 3 - 3, 1);
        var endDate = new Date(firstDate.getFullYear(), firstDate.getMonth() + 3, 0);
        alert(firstDate.toDateString('dd/mon/yyyy')+";"+endDate.toDateString('dd/mon/yyyy'));

        }

        else if(quarter==4){
        var firstDate = new Date(d.getFullYear(), quarter * 3 - 3, 1);
        var endDate = new Date(firstDate.getFullYear(), firstDate.getMonth() + 3, 0);
        alert(firstDate.toDateString('dd/mon/yyyy')+";"+endDate.toDateString('dd/mon/yyyy'));

        }

    }
--------
/*var lastdayoflastmonth = new Date();
    lastdayoflastmonth.setMonth(lastdayoflastmonth.getMonth(), 0);
    var endOfLastMonth = date.getMonth() +"/"+lastdayoflastmonth.getDate()+"/"+date.getFullYear();*/


var lastdayoflastmonth = new Date();
        lastdayoflastmonth.setMonth(lastdayoflastmonth.getMonth(), 0);
        var endOfLastMonth = lastdayoflastmonth.getMonth()+1 +"/"+lastdayoflastmonth.getDate()+"/"+date.getFullYear();
----------